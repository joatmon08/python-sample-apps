
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Getting Started &#8212; Cassandra Driver 3.11.0 documentation</title>

    <link rel="stylesheet" href="_static/custom.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />

    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '3.11.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Upgrading" href="upgrading.html" />
    <link rel="prev" title="Installation" href="installation.html" />
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Getting Started</a><ul>
<li><a class="reference internal" href="#connecting-to-cassandra">Connecting to Cassandra</a></li>
<li><a class="reference internal" href="#executing-queries">Executing Queries</a><ul>
<li><a class="reference internal" href="#passing-parameters-to-cql-queries">Passing Parameters to CQL Queries</a></li>
<li><a class="reference internal" href="#type-conversions">Type Conversions</a></li>
<li><a class="reference internal" href="#asynchronous-queries">Asynchronous Queries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#setting-a-consistency-level">Setting a Consistency Level</a></li>
<li><a class="reference internal" href="#id2">Prepared Statements</a><ul>
<li><a class="reference internal" href="#setting-a-consistency-level-with-prepared-statements">Setting a Consistency Level with Prepared Statements</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="installation.html"
                        title="previous chapter">Installation</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="upgrading.html"
                        title="next chapter">Upgrading</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/getting_started.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <div><input type="text" name="q" /></div>
      <div><input type="submit" value="Go" /></div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">

  <div class="section" id="getting-started">
<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
<p>First, make sure you have the driver properly <a class="reference internal" href="installation.html"><span class="doc">installed</span></a>.</p>
<div class="section" id="connecting-to-cassandra">
<h2>Connecting to Cassandra<a class="headerlink" href="#connecting-to-cassandra" title="Permalink to this headline">¶</a></h2>
<p>Before we can start executing any queries against a Cassandra cluster we need to setup
an instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a>. As the name suggests, you will typically have one
instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> for each Cassandra cluster you want to interact
with.</p>
<p>The simplest way to create a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
</pre></div>
</div>
<p>This will attempt to connection to a Cassandra instance on your
local machine (127.0.0.1).  You can also specify a list of IP
addresses for nodes in your cluster:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">([</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>The set of IP addresses we pass to the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is simply
an initial set of contact points.  After the driver connects to one
of these nodes it will <em>automatically discover</em> the rest of the
nodes in the cluster and connect to them, so you don&#8217;t need to list
every node in your cluster.</p>
<p>If you need to use a non-standard port, use SSL, or customize the driver&#8217;s
behavior in some other way, this is the place to do it:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>
<span class="kn">from</span> <span class="nn">cassandra.policies</span> <span class="kn">import</span> <span class="n">DCAwareRoundRobinPolicy</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">(</span>
    <span class="p">[</span><span class="s1">&#39;10.1.1.3&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.4&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.5&#39;</span><span class="p">],</span>
    <span class="n">load_balancing_policy</span><span class="o">=</span><span class="n">DCAwareRoundRobinPolicy</span><span class="p">(</span><span class="n">local_dc</span><span class="o">=</span><span class="s1">&#39;US_EAST&#39;</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9042</span><span class="p">)</span>
</pre></div>
</div>
<p>You can find a more complete list of options in the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> documentation.</p>
<p>Instantiating a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> does not actually connect us to any nodes.
To establish connections and begin executing queries we need a
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>, which is created by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">Cluster.connect()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">connect()</span></code></a> method takes an optional <code class="docutils literal"><span class="pre">keyspace</span></code> argument
which sets the default keyspace for all queries made through that <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mykeyspace&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>You can always change a Session&#8217;s keyspace using <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.set_keyspace" title="cassandra.cluster.Session.set_keyspace"><code class="xref py py-meth docutils literal"><span class="pre">set_keyspace()</span></code></a> or
by executing a <code class="docutils literal"><span class="pre">USE</span> <span class="pre">&lt;keyspace&gt;</span></code> query:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">set_keyspace</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span>
<span class="c1"># or you can do this instead</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;USE users&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="executing-queries">
<h2>Executing Queries<a class="headerlink" href="#executing-queries" title="Permalink to this headline">¶</a></h2>
<p>Now that we have a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a> we can begin to execute queries. The simplest
way to execute a query is to use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute" title="cassandra.cluster.Session.execute"><code class="xref py py-meth docutils literal"><span class="pre">execute()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user_row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">user_row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<p>This will transparently pick a Cassandra node to execute the query against
and handle any retries that are necessary if the operation fails.</p>
<p>By default, each row in the result set will be a
<a class="reference external" href="http://docs.python.org/2/library/collections.html#collections.namedtuple">namedtuple</a>.
Each row will have a matching attribute for each column defined in the schema,
such as <code class="docutils literal"><span class="pre">name</span></code>, <code class="docutils literal"><span class="pre">age</span></code>, and so on.  You can also treat them as normal tuples
by unpacking them or accessing fields by position.  The following three
examples are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
</div>
<p>If you prefer another result format, such as a <code class="docutils literal"><span class="pre">dict</span></code> per row, you
can change the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.row_factory" title="cassandra.cluster.Session.row_factory"><code class="xref py py-attr docutils literal"><span class="pre">row_factory</span></code></a> attribute.</p>
<p>For queries that will be run repeatedly, you should use
<a class="reference external" href="#prepared-statements">Prepared statements</a>.</p>
<div class="section" id="passing-parameters-to-cql-queries">
<h3>Passing Parameters to CQL Queries<a class="headerlink" href="#passing-parameters-to-cql-queries" title="Permalink to this headline">¶</a></h3>
<p>When executing non-prepared statements, the driver supports two forms of
parameter place-holders: positional and named.</p>
<p>Positional parameters are used with a <code class="docutils literal"><span class="pre">%s</span></code> placeholder.  For example,
when you execute:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id)</span>
<span class="sd">    VALUES (%s, %s, %s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">(</span><span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">())</span>
<span class="p">)</span>
</pre></div>
</div>
<p>It is translated to the following CQL query:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">credits</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="n">VALUES</span> <span class="p">(</span><span class="s1">&#39;John O&#39;&#39;Reilly&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">2644</span><span class="n">bada</span><span class="o">-</span><span class="mi">852</span><span class="n">c</span><span class="o">-</span><span class="mf">11e3</span><span class="o">-</span><span class="mi">89</span><span class="n">fb</span><span class="o">-</span><span class="n">e0b9a54a6d93</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you should use <code class="docutils literal"><span class="pre">%s</span></code> for all types of arguments, not just strings.
For example, this would be <strong>wrong</strong>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO USERS (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%d</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>  <span class="c1"># wrong</span>
</pre></div>
</div>
<p>Instead, use <code class="docutils literal"><span class="pre">%s</span></code> for the age placeholder.</p>
<p>If you need to use a literal <code class="docutils literal"><span class="pre">%</span></code> character, use <code class="docutils literal"><span class="pre">%%</span></code>.</p>
<p><strong>Note</strong>: you must always use a sequence for the second argument, even if you are
only passing in a single variable:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="s2">&quot;blah&quot;</span><span class="p">)</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">))</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="p">))</span>  <span class="c1"># right</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;blah&quot;</span><span class="p">])</span>  <span class="c1"># right</span>
</pre></div>
</div>
<p>Note that the second line is incorrect because in Python, single-element tuples
require a comma.</p>
<p>Named place-holders use the <code class="docutils literal"><span class="pre">%(name)s</span></code> form:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id, username)</span>
<span class="sd">    VALUES (%(name)s, %(credits)s, %(user_id)s, %(name)s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="s1">&#39;credits&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">()}</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note that you can repeat placeholders with the same name, such as <code class="docutils literal"><span class="pre">%(name)s</span></code>
in the above example.</p>
<p>Only data values should be supplied this way.  Other items, such as keyspaces,
table names, and column names should be set ahead of time (typically using
normal string formatting).</p>
</div>
<div class="section" id="type-conversions">
<span id="id1"></span><h3>Type Conversions<a class="headerlink" href="#type-conversions" title="Permalink to this headline">¶</a></h3>
<p>For non-prepared statements, Python types are cast to CQL literals in the
following way:</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Python Type</th>
<th class="head">CQL Literal Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">None</span></code></td>
<td><code class="docutils literal"><span class="pre">NULL</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">bool</span></code></td>
<td><code class="docutils literal"><span class="pre">boolean</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">float</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">float</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">double</span></code></div>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">long</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bigint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">smallint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tinyint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">counter</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">decimal.Decimal</span></code></td>
<td><code class="docutils literal"><span class="pre">decimal</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">str</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">unicode</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">ascii</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varchar</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">text</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">buffer</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bytearray</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">blob</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">date</span></code></td>
<td><code class="docutils literal"><span class="pre">date</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">datetime</span></code></td>
<td><code class="docutils literal"><span class="pre">timestamp</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">time</span></code></td>
<td><code class="docutils literal"><span class="pre">time</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">list</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tuple</span></code></div>
<div class="line">generator</div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">list</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">set</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">frozenset</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">set</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">dict</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">OrderedDict</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">map</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">uuid.UUID</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">timeuuid</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">uuid</span></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="asynchronous-queries">
<h3>Asynchronous Queries<a class="headerlink" href="#asynchronous-queries" title="Permalink to this headline">¶</a></h3>
<p>The driver supports asynchronous query execution through
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute_async" title="cassandra.cluster.Session.execute_async"><code class="xref py py-meth docutils literal"><span class="pre">execute_async()</span></code></a>.  Instead of waiting for the query to
complete and returning rows directly, this method almost immediately
returns a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture" title="cassandra.cluster.ResponseFuture"><code class="xref py py-class docutils literal"><span class="pre">ResponseFuture</span></code></a> object.  There are two ways of
getting the final result from this object.</p>
<p>The first is by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a> on it. If
the query has not yet completed, this will block until it has and
then return the result or raise an Exception if an error occurred.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ReadTimeout</span>

<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># ... do some other work</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
<span class="k">except</span> <span class="n">ReadTimeout</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&quot;Query timed out:&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This works well for executing many queries concurrently:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># build a list of futures</span>
<span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">ids_to_fetch</span><span class="p">:</span>
    <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># wait for them to complete and use the results</span>
<span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">futures</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>
<p>Alternatively, instead of calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a>,
you can attach callback and errback functions through the
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callback" title="cassandra.cluster.ResponseFuture.add_callback"><code class="xref py py-meth docutils literal"><span class="pre">add_callback()</span></code></a>,
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_errback" title="cassandra.cluster.ResponseFuture.add_errback"><code class="xref py py-meth docutils literal"><span class="pre">add_errback()</span></code></a>, and
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callbacks" title="cassandra.cluster.ResponseFuture.add_callbacks"><code class="xref py py-meth docutils literal"><span class="pre">add_callbacks()</span></code></a>, methods.  If you have used
Twisted Python before, this is designed to be a lightweight version of
that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_success</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">process_user</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to process user </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="c1"># don&#39;t re-raise errors in the callback</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">exception</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch user info: </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>


<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">future</span><span class="o">.</span><span class="n">add_callbacks</span><span class="p">(</span><span class="n">handle_success</span><span class="p">,</span> <span class="n">handle_error</span><span class="p">)</span>
</pre></div>
</div>
<dl class="docutils">
<dt>There are a few important things to remember when working with callbacks:</dt>
<dd><ul class="first last simple">
<li><strong>Exceptions that are raised inside the callback functions will be logged and then ignored.</strong></li>
<li>Your callback will be run on the event loop thread, so any long-running
operations will prevent other requests from being handled</li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="setting-a-consistency-level">
<h2>Setting a Consistency Level<a class="headerlink" href="#setting-a-consistency-level" title="Permalink to this headline">¶</a></h2>
<p>The consistency level used for a query determines how many of the
replicas of the data you are interacting with need to respond for
the query to be considered a success.</p>
<p>By default, <a class="reference internal" href="api/cassandra.html#cassandra.ConsistencyLevel.LOCAL_ONE" title="cassandra.ConsistencyLevel.LOCAL_ONE"><code class="xref py py-attr docutils literal"><span class="pre">ConsistencyLevel.LOCAL_ONE</span></code></a> will be used for all queries.
You can specify a different default for the session on <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.default_consistency_level" title="cassandra.cluster.Session.default_consistency_level"><code class="xref py py-attr docutils literal"><span class="pre">Session.default_consistency_level</span></code></a>.
To specify a different consistency level per request, wrap queries
in a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>
<span class="kn">from</span> <span class="nn">cassandra.query</span> <span class="kn">import</span> <span class="n">SimpleStatement</span>

<span class="n">query</span> <span class="o">=</span> <span class="n">SimpleStatement</span><span class="p">(</span>
    <span class="s2">&quot;INSERT INTO users (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="n">consistency_level</span><span class="o">=</span><span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h2>Prepared Statements<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Prepared statements are queries that are parsed by Cassandra and then saved
for later use.  When the driver uses a prepared statement, it only needs to
send the values of parameters to bind.  This lowers network traffic
and CPU utilization within Cassandra because Cassandra does not have to
re-parse the query each time.</p>
<p>To prepare a query, use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">Session.prepare()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>

<span class="n">users</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">user_ids_to_query</span><span class="p">:</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>
    <span class="n">users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">prepare()</span></code></a> returns a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> instance
which can be used in place of <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a> instances or literal
string queries.  It is automatically prepared against all nodes, and the driver
handles re-preparing against new nodes and restarted nodes when necessary.</p>
<p>Note that the placeholders for prepared statements are <code class="docutils literal"><span class="pre">?</span></code> characters.  This
is different than for simple, non-prepared statements (although future versions
of the driver may use the same placeholders for both).</p>
<div class="section" id="setting-a-consistency-level-with-prepared-statements">
<h3>Setting a Consistency Level with Prepared Statements<a class="headerlink" href="#setting-a-consistency-level-with-prepared-statements" title="Permalink to this headline">¶</a></h3>
<p>To specify a consistency level for prepared statements, you have two options.</p>
<p>The first is to set a default consistency level for every execution of the
prepared statement:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;mykeyspace&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span>

<span class="c1"># these will both use QUORUM</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id2</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
<p>The second option is to create a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.BoundStatement" title="cassandra.query.BoundStatement"><code class="xref py py-class docutils literal"><span class="pre">BoundStatement</span></code></a> from the
<a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> and binding parameters and set a consistency
level on that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># override the QUORUM default</span>
<span class="n">user3_lookup</span> <span class="o">=</span> <span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">bind</span><span class="p">([</span><span class="n">user_id3</span><span class="p">])</span>
<span class="n">user3_lookup</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">ALL</span>
<span class="n">user3</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user3_lookup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             >next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2013-2017 DataStax.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3.
    </div>
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Getting Started &#8212; Cassandra Driver 3.11.0 documentation</title>

    <link rel="stylesheet" href="_static/custom.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />

    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '3.11.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Upgrading" href="upgrading.html" />
    <link rel="prev" title="Installation" href="installation.html" />
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Getting Started</a><ul>
<li><a class="reference internal" href="#connecting-to-cassandra">Connecting to Cassandra</a></li>
<li><a class="reference internal" href="#executing-queries">Executing Queries</a><ul>
<li><a class="reference internal" href="#passing-parameters-to-cql-queries">Passing Parameters to CQL Queries</a></li>
<li><a class="reference internal" href="#type-conversions">Type Conversions</a></li>
<li><a class="reference internal" href="#asynchronous-queries">Asynchronous Queries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#setting-a-consistency-level">Setting a Consistency Level</a></li>
<li><a class="reference internal" href="#id2">Prepared Statements</a><ul>
<li><a class="reference internal" href="#setting-a-consistency-level-with-prepared-statements">Setting a Consistency Level with Prepared Statements</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="installation.html"
                        title="previous chapter">Installation</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="upgrading.html"
                        title="next chapter">Upgrading</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/getting_started.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <div><input type="text" name="q" /></div>
      <div><input type="submit" value="Go" /></div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">

  <div class="section" id="getting-started">
<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
<p>First, make sure you have the driver properly <a class="reference internal" href="installation.html"><span class="doc">installed</span></a>.</p>
<div class="section" id="connecting-to-cassandra">
<h2>Connecting to Cassandra<a class="headerlink" href="#connecting-to-cassandra" title="Permalink to this headline">¶</a></h2>
<p>Before we can start executing any queries against a Cassandra cluster we need to setup
an instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a>. As the name suggests, you will typically have one
instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> for each Cassandra cluster you want to interact
with.</p>
<p>The simplest way to create a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
</pre></div>
</div>
<p>This will attempt to connection to a Cassandra instance on your
local machine (127.0.0.1).  You can also specify a list of IP
addresses for nodes in your cluster:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">([</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>The set of IP addresses we pass to the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is simply
an initial set of contact points.  After the driver connects to one
of these nodes it will <em>automatically discover</em> the rest of the
nodes in the cluster and connect to them, so you don&#8217;t need to list
every node in your cluster.</p>
<p>If you need to use a non-standard port, use SSL, or customize the driver&#8217;s
behavior in some other way, this is the place to do it:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>
<span class="kn">from</span> <span class="nn">cassandra.policies</span> <span class="kn">import</span> <span class="n">DCAwareRoundRobinPolicy</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">(</span>
    <span class="p">[</span><span class="s1">&#39;10.1.1.3&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.4&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.5&#39;</span><span class="p">],</span>
    <span class="n">load_balancing_policy</span><span class="o">=</span><span class="n">DCAwareRoundRobinPolicy</span><span class="p">(</span><span class="n">local_dc</span><span class="o">=</span><span class="s1">&#39;US_EAST&#39;</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9042</span><span class="p">)</span>
</pre></div>
</div>
<p>You can find a more complete list of options in the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> documentation.</p>
<p>Instantiating a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> does not actually connect us to any nodes.
To establish connections and begin executing queries we need a
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>, which is created by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">Cluster.connect()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">connect()</span></code></a> method takes an optional <code class="docutils literal"><span class="pre">keyspace</span></code> argument
which sets the default keyspace for all queries made through that <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mykeyspace&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>You can always change a Session&#8217;s keyspace using <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.set_keyspace" title="cassandra.cluster.Session.set_keyspace"><code class="xref py py-meth docutils literal"><span class="pre">set_keyspace()</span></code></a> or
by executing a <code class="docutils literal"><span class="pre">USE</span> <span class="pre">&lt;keyspace&gt;</span></code> query:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">set_keyspace</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span>
<span class="c1"># or you can do this instead</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;USE users&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="executing-queries">
<h2>Executing Queries<a class="headerlink" href="#executing-queries" title="Permalink to this headline">¶</a></h2>
<p>Now that we have a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a> we can begin to execute queries. The simplest
way to execute a query is to use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute" title="cassandra.cluster.Session.execute"><code class="xref py py-meth docutils literal"><span class="pre">execute()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user_row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">user_row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<p>This will transparently pick a Cassandra node to execute the query against
and handle any retries that are necessary if the operation fails.</p>
<p>By default, each row in the result set will be a
<a class="reference external" href="http://docs.python.org/2/library/collections.html#collections.namedtuple">namedtuple</a>.
Each row will have a matching attribute for each column defined in the schema,
such as <code class="docutils literal"><span class="pre">name</span></code>, <code class="docutils literal"><span class="pre">age</span></code>, and so on.  You can also treat them as normal tuples
by unpacking them or accessing fields by position.  The following three
examples are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
</div>
<p>If you prefer another result format, such as a <code class="docutils literal"><span class="pre">dict</span></code> per row, you
can change the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.row_factory" title="cassandra.cluster.Session.row_factory"><code class="xref py py-attr docutils literal"><span class="pre">row_factory</span></code></a> attribute.</p>
<p>For queries that will be run repeatedly, you should use
<a class="reference external" href="#prepared-statements">Prepared statements</a>.</p>
<div class="section" id="passing-parameters-to-cql-queries">
<h3>Passing Parameters to CQL Queries<a class="headerlink" href="#passing-parameters-to-cql-queries" title="Permalink to this headline">¶</a></h3>
<p>When executing non-prepared statements, the driver supports two forms of
parameter place-holders: positional and named.</p>
<p>Positional parameters are used with a <code class="docutils literal"><span class="pre">%s</span></code> placeholder.  For example,
when you execute:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id)</span>
<span class="sd">    VALUES (%s, %s, %s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">(</span><span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">())</span>
<span class="p">)</span>
</pre></div>
</div>
<p>It is translated to the following CQL query:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">credits</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="n">VALUES</span> <span class="p">(</span><span class="s1">&#39;John O&#39;&#39;Reilly&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">2644</span><span class="n">bada</span><span class="o">-</span><span class="mi">852</span><span class="n">c</span><span class="o">-</span><span class="mf">11e3</span><span class="o">-</span><span class="mi">89</span><span class="n">fb</span><span class="o">-</span><span class="n">e0b9a54a6d93</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you should use <code class="docutils literal"><span class="pre">%s</span></code> for all types of arguments, not just strings.
For example, this would be <strong>wrong</strong>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO USERS (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%d</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>  <span class="c1"># wrong</span>
</pre></div>
</div>
<p>Instead, use <code class="docutils literal"><span class="pre">%s</span></code> for the age placeholder.</p>
<p>If you need to use a literal <code class="docutils literal"><span class="pre">%</span></code> character, use <code class="docutils literal"><span class="pre">%%</span></code>.</p>
<p><strong>Note</strong>: you must always use a sequence for the second argument, even if you are
only passing in a single variable:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="s2">&quot;blah&quot;</span><span class="p">)</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">))</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="p">))</span>  <span class="c1"># right</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;blah&quot;</span><span class="p">])</span>  <span class="c1"># right</span>
</pre></div>
</div>
<p>Note that the second line is incorrect because in Python, single-element tuples
require a comma.</p>
<p>Named place-holders use the <code class="docutils literal"><span class="pre">%(name)s</span></code> form:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id, username)</span>
<span class="sd">    VALUES (%(name)s, %(credits)s, %(user_id)s, %(name)s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="s1">&#39;credits&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">()}</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note that you can repeat placeholders with the same name, such as <code class="docutils literal"><span class="pre">%(name)s</span></code>
in the above example.</p>
<p>Only data values should be supplied this way.  Other items, such as keyspaces,
table names, and column names should be set ahead of time (typically using
normal string formatting).</p>
</div>
<div class="section" id="type-conversions">
<span id="id1"></span><h3>Type Conversions<a class="headerlink" href="#type-conversions" title="Permalink to this headline">¶</a></h3>
<p>For non-prepared statements, Python types are cast to CQL literals in the
following way:</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Python Type</th>
<th class="head">CQL Literal Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">None</span></code></td>
<td><code class="docutils literal"><span class="pre">NULL</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">bool</span></code></td>
<td><code class="docutils literal"><span class="pre">boolean</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">float</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">float</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">double</span></code></div>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">long</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bigint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">smallint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tinyint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">counter</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">decimal.Decimal</span></code></td>
<td><code class="docutils literal"><span class="pre">decimal</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">str</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">unicode</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">ascii</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varchar</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">text</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">buffer</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bytearray</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">blob</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">date</span></code></td>
<td><code class="docutils literal"><span class="pre">date</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">datetime</span></code></td>
<td><code class="docutils literal"><span class="pre">timestamp</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">time</span></code></td>
<td><code class="docutils literal"><span class="pre">time</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">list</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tuple</span></code></div>
<div class="line">generator</div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">list</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">set</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">frozenset</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">set</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">dict</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">OrderedDict</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">map</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">uuid.UUID</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">timeuuid</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">uuid</span></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="asynchronous-queries">
<h3>Asynchronous Queries<a class="headerlink" href="#asynchronous-queries" title="Permalink to this headline">¶</a></h3>
<p>The driver supports asynchronous query execution through
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute_async" title="cassandra.cluster.Session.execute_async"><code class="xref py py-meth docutils literal"><span class="pre">execute_async()</span></code></a>.  Instead of waiting for the query to
complete and returning rows directly, this method almost immediately
returns a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture" title="cassandra.cluster.ResponseFuture"><code class="xref py py-class docutils literal"><span class="pre">ResponseFuture</span></code></a> object.  There are two ways of
getting the final result from this object.</p>
<p>The first is by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a> on it. If
the query has not yet completed, this will block until it has and
then return the result or raise an Exception if an error occurred.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ReadTimeout</span>

<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># ... do some other work</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
<span class="k">except</span> <span class="n">ReadTimeout</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&quot;Query timed out:&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This works well for executing many queries concurrently:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># build a list of futures</span>
<span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">ids_to_fetch</span><span class="p">:</span>
    <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># wait for them to complete and use the results</span>
<span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">futures</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>
<p>Alternatively, instead of calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a>,
you can attach callback and errback functions through the
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callback" title="cassandra.cluster.ResponseFuture.add_callback"><code class="xref py py-meth docutils literal"><span class="pre">add_callback()</span></code></a>,
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_errback" title="cassandra.cluster.ResponseFuture.add_errback"><code class="xref py py-meth docutils literal"><span class="pre">add_errback()</span></code></a>, and
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callbacks" title="cassandra.cluster.ResponseFuture.add_callbacks"><code class="xref py py-meth docutils literal"><span class="pre">add_callbacks()</span></code></a>, methods.  If you have used
Twisted Python before, this is designed to be a lightweight version of
that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_success</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">process_user</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to process user </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="c1"># don&#39;t re-raise errors in the callback</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">exception</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch user info: </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>


<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">future</span><span class="o">.</span><span class="n">add_callbacks</span><span class="p">(</span><span class="n">handle_success</span><span class="p">,</span> <span class="n">handle_error</span><span class="p">)</span>
</pre></div>
</div>
<dl class="docutils">
<dt>There are a few important things to remember when working with callbacks:</dt>
<dd><ul class="first last simple">
<li><strong>Exceptions that are raised inside the callback functions will be logged and then ignored.</strong></li>
<li>Your callback will be run on the event loop thread, so any long-running
operations will prevent other requests from being handled</li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="setting-a-consistency-level">
<h2>Setting a Consistency Level<a class="headerlink" href="#setting-a-consistency-level" title="Permalink to this headline">¶</a></h2>
<p>The consistency level used for a query determines how many of the
replicas of the data you are interacting with need to respond for
the query to be considered a success.</p>
<p>By default, <a class="reference internal" href="api/cassandra.html#cassandra.ConsistencyLevel.LOCAL_ONE" title="cassandra.ConsistencyLevel.LOCAL_ONE"><code class="xref py py-attr docutils literal"><span class="pre">ConsistencyLevel.LOCAL_ONE</span></code></a> will be used for all queries.
You can specify a different default for the session on <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.default_consistency_level" title="cassandra.cluster.Session.default_consistency_level"><code class="xref py py-attr docutils literal"><span class="pre">Session.default_consistency_level</span></code></a>.
To specify a different consistency level per request, wrap queries
in a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>
<span class="kn">from</span> <span class="nn">cassandra.query</span> <span class="kn">import</span> <span class="n">SimpleStatement</span>

<span class="n">query</span> <span class="o">=</span> <span class="n">SimpleStatement</span><span class="p">(</span>
    <span class="s2">&quot;INSERT INTO users (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="n">consistency_level</span><span class="o">=</span><span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h2>Prepared Statements<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Prepared statements are queries that are parsed by Cassandra and then saved
for later use.  When the driver uses a prepared statement, it only needs to
send the values of parameters to bind.  This lowers network traffic
and CPU utilization within Cassandra because Cassandra does not have to
re-parse the query each time.</p>
<p>To prepare a query, use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">Session.prepare()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>

<span class="n">users</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">user_ids_to_query</span><span class="p">:</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>
    <span class="n">users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">prepare()</span></code></a> returns a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> instance
which can be used in place of <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a> instances or literal
string queries.  It is automatically prepared against all nodes, and the driver
handles re-preparing against new nodes and restarted nodes when necessary.</p>
<p>Note that the placeholders for prepared statements are <code class="docutils literal"><span class="pre">?</span></code> characters.  This
is different than for simple, non-prepared statements (although future versions
of the driver may use the same placeholders for both).</p>
<div class="section" id="setting-a-consistency-level-with-prepared-statements">
<h3>Setting a Consistency Level with Prepared Statements<a class="headerlink" href="#setting-a-consistency-level-with-prepared-statements" title="Permalink to this headline">¶</a></h3>
<p>To specify a consistency level for prepared statements, you have two options.</p>
<p>The first is to set a default consistency level for every execution of the
prepared statement:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;mykeyspace&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span>

<span class="c1"># these will both use QUORUM</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id2</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
<p>The second option is to create a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.BoundStatement" title="cassandra.query.BoundStatement"><code class="xref py py-class docutils literal"><span class="pre">BoundStatement</span></code></a> from the
<a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> and binding parameters and set a consistency
level on that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># override the QUORUM default</span>
<span class="n">user3_lookup</span> <span class="o">=</span> <span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">bind</span><span class="p">([</span><span class="n">user_id3</span><span class="p">])</span>
<span class="n">user3_lookup</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">ALL</span>
<span class="n">user3</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user3_lookup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             >next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2013-2017 DataStax.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3.
    </div>
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Getting Started &#8212; Cassandra Driver 3.11.0 documentation</title>

    <link rel="stylesheet" href="_static/custom.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />

    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '3.11.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Upgrading" href="upgrading.html" />
    <link rel="prev" title="Installation" href="installation.html" />
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Getting Started</a><ul>
<li><a class="reference internal" href="#connecting-to-cassandra">Connecting to Cassandra</a></li>
<li><a class="reference internal" href="#executing-queries">Executing Queries</a><ul>
<li><a class="reference internal" href="#passing-parameters-to-cql-queries">Passing Parameters to CQL Queries</a></li>
<li><a class="reference internal" href="#type-conversions">Type Conversions</a></li>
<li><a class="reference internal" href="#asynchronous-queries">Asynchronous Queries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#setting-a-consistency-level">Setting a Consistency Level</a></li>
<li><a class="reference internal" href="#id2">Prepared Statements</a><ul>
<li><a class="reference internal" href="#setting-a-consistency-level-with-prepared-statements">Setting a Consistency Level with Prepared Statements</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="installation.html"
                        title="previous chapter">Installation</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="upgrading.html"
                        title="next chapter">Upgrading</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/getting_started.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <div><input type="text" name="q" /></div>
      <div><input type="submit" value="Go" /></div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">

  <div class="section" id="getting-started">
<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
<p>First, make sure you have the driver properly <a class="reference internal" href="installation.html"><span class="doc">installed</span></a>.</p>
<div class="section" id="connecting-to-cassandra">
<h2>Connecting to Cassandra<a class="headerlink" href="#connecting-to-cassandra" title="Permalink to this headline">¶</a></h2>
<p>Before we can start executing any queries against a Cassandra cluster we need to setup
an instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a>. As the name suggests, you will typically have one
instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> for each Cassandra cluster you want to interact
with.</p>
<p>The simplest way to create a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
</pre></div>
</div>
<p>This will attempt to connection to a Cassandra instance on your
local machine (127.0.0.1).  You can also specify a list of IP
addresses for nodes in your cluster:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">([</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>The set of IP addresses we pass to the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is simply
an initial set of contact points.  After the driver connects to one
of these nodes it will <em>automatically discover</em> the rest of the
nodes in the cluster and connect to them, so you don&#8217;t need to list
every node in your cluster.</p>
<p>If you need to use a non-standard port, use SSL, or customize the driver&#8217;s
behavior in some other way, this is the place to do it:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>
<span class="kn">from</span> <span class="nn">cassandra.policies</span> <span class="kn">import</span> <span class="n">DCAwareRoundRobinPolicy</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">(</span>
    <span class="p">[</span><span class="s1">&#39;10.1.1.3&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.4&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.5&#39;</span><span class="p">],</span>
    <span class="n">load_balancing_policy</span><span class="o">=</span><span class="n">DCAwareRoundRobinPolicy</span><span class="p">(</span><span class="n">local_dc</span><span class="o">=</span><span class="s1">&#39;US_EAST&#39;</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9042</span><span class="p">)</span>
</pre></div>
</div>
<p>You can find a more complete list of options in the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> documentation.</p>
<p>Instantiating a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> does not actually connect us to any nodes.
To establish connections and begin executing queries we need a
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>, which is created by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">Cluster.connect()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">connect()</span></code></a> method takes an optional <code class="docutils literal"><span class="pre">keyspace</span></code> argument
which sets the default keyspace for all queries made through that <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mykeyspace&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>You can always change a Session&#8217;s keyspace using <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.set_keyspace" title="cassandra.cluster.Session.set_keyspace"><code class="xref py py-meth docutils literal"><span class="pre">set_keyspace()</span></code></a> or
by executing a <code class="docutils literal"><span class="pre">USE</span> <span class="pre">&lt;keyspace&gt;</span></code> query:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">set_keyspace</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span>
<span class="c1"># or you can do this instead</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;USE users&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="executing-queries">
<h2>Executing Queries<a class="headerlink" href="#executing-queries" title="Permalink to this headline">¶</a></h2>
<p>Now that we have a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a> we can begin to execute queries. The simplest
way to execute a query is to use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute" title="cassandra.cluster.Session.execute"><code class="xref py py-meth docutils literal"><span class="pre">execute()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user_row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">user_row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<p>This will transparently pick a Cassandra node to execute the query against
and handle any retries that are necessary if the operation fails.</p>
<p>By default, each row in the result set will be a
<a class="reference external" href="http://docs.python.org/2/library/collections.html#collections.namedtuple">namedtuple</a>.
Each row will have a matching attribute for each column defined in the schema,
such as <code class="docutils literal"><span class="pre">name</span></code>, <code class="docutils literal"><span class="pre">age</span></code>, and so on.  You can also treat them as normal tuples
by unpacking them or accessing fields by position.  The following three
examples are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
</div>
<p>If you prefer another result format, such as a <code class="docutils literal"><span class="pre">dict</span></code> per row, you
can change the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.row_factory" title="cassandra.cluster.Session.row_factory"><code class="xref py py-attr docutils literal"><span class="pre">row_factory</span></code></a> attribute.</p>
<p>For queries that will be run repeatedly, you should use
<a class="reference external" href="#prepared-statements">Prepared statements</a>.</p>
<div class="section" id="passing-parameters-to-cql-queries">
<h3>Passing Parameters to CQL Queries<a class="headerlink" href="#passing-parameters-to-cql-queries" title="Permalink to this headline">¶</a></h3>
<p>When executing non-prepared statements, the driver supports two forms of
parameter place-holders: positional and named.</p>
<p>Positional parameters are used with a <code class="docutils literal"><span class="pre">%s</span></code> placeholder.  For example,
when you execute:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id)</span>
<span class="sd">    VALUES (%s, %s, %s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">(</span><span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">())</span>
<span class="p">)</span>
</pre></div>
</div>
<p>It is translated to the following CQL query:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">credits</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="n">VALUES</span> <span class="p">(</span><span class="s1">&#39;John O&#39;&#39;Reilly&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">2644</span><span class="n">bada</span><span class="o">-</span><span class="mi">852</span><span class="n">c</span><span class="o">-</span><span class="mf">11e3</span><span class="o">-</span><span class="mi">89</span><span class="n">fb</span><span class="o">-</span><span class="n">e0b9a54a6d93</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you should use <code class="docutils literal"><span class="pre">%s</span></code> for all types of arguments, not just strings.
For example, this would be <strong>wrong</strong>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO USERS (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%d</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>  <span class="c1"># wrong</span>
</pre></div>
</div>
<p>Instead, use <code class="docutils literal"><span class="pre">%s</span></code> for the age placeholder.</p>
<p>If you need to use a literal <code class="docutils literal"><span class="pre">%</span></code> character, use <code class="docutils literal"><span class="pre">%%</span></code>.</p>
<p><strong>Note</strong>: you must always use a sequence for the second argument, even if you are
only passing in a single variable:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="s2">&quot;blah&quot;</span><span class="p">)</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">))</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="p">))</span>  <span class="c1"># right</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;blah&quot;</span><span class="p">])</span>  <span class="c1"># right</span>
</pre></div>
</div>
<p>Note that the second line is incorrect because in Python, single-element tuples
require a comma.</p>
<p>Named place-holders use the <code class="docutils literal"><span class="pre">%(name)s</span></code> form:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id, username)</span>
<span class="sd">    VALUES (%(name)s, %(credits)s, %(user_id)s, %(name)s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="s1">&#39;credits&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">()}</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note that you can repeat placeholders with the same name, such as <code class="docutils literal"><span class="pre">%(name)s</span></code>
in the above example.</p>
<p>Only data values should be supplied this way.  Other items, such as keyspaces,
table names, and column names should be set ahead of time (typically using
normal string formatting).</p>
</div>
<div class="section" id="type-conversions">
<span id="id1"></span><h3>Type Conversions<a class="headerlink" href="#type-conversions" title="Permalink to this headline">¶</a></h3>
<p>For non-prepared statements, Python types are cast to CQL literals in the
following way:</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Python Type</th>
<th class="head">CQL Literal Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">None</span></code></td>
<td><code class="docutils literal"><span class="pre">NULL</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">bool</span></code></td>
<td><code class="docutils literal"><span class="pre">boolean</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">float</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">float</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">double</span></code></div>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">long</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bigint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">smallint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tinyint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">counter</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">decimal.Decimal</span></code></td>
<td><code class="docutils literal"><span class="pre">decimal</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">str</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">unicode</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">ascii</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varchar</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">text</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">buffer</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bytearray</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">blob</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">date</span></code></td>
<td><code class="docutils literal"><span class="pre">date</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">datetime</span></code></td>
<td><code class="docutils literal"><span class="pre">timestamp</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">time</span></code></td>
<td><code class="docutils literal"><span class="pre">time</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">list</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tuple</span></code></div>
<div class="line">generator</div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">list</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">set</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">frozenset</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">set</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">dict</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">OrderedDict</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">map</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">uuid.UUID</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">timeuuid</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">uuid</span></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="asynchronous-queries">
<h3>Asynchronous Queries<a class="headerlink" href="#asynchronous-queries" title="Permalink to this headline">¶</a></h3>
<p>The driver supports asynchronous query execution through
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute_async" title="cassandra.cluster.Session.execute_async"><code class="xref py py-meth docutils literal"><span class="pre">execute_async()</span></code></a>.  Instead of waiting for the query to
complete and returning rows directly, this method almost immediately
returns a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture" title="cassandra.cluster.ResponseFuture"><code class="xref py py-class docutils literal"><span class="pre">ResponseFuture</span></code></a> object.  There are two ways of
getting the final result from this object.</p>
<p>The first is by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a> on it. If
the query has not yet completed, this will block until it has and
then return the result or raise an Exception if an error occurred.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ReadTimeout</span>

<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># ... do some other work</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
<span class="k">except</span> <span class="n">ReadTimeout</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&quot;Query timed out:&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This works well for executing many queries concurrently:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># build a list of futures</span>
<span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">ids_to_fetch</span><span class="p">:</span>
    <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># wait for them to complete and use the results</span>
<span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">futures</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>
<p>Alternatively, instead of calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a>,
you can attach callback and errback functions through the
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callback" title="cassandra.cluster.ResponseFuture.add_callback"><code class="xref py py-meth docutils literal"><span class="pre">add_callback()</span></code></a>,
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_errback" title="cassandra.cluster.ResponseFuture.add_errback"><code class="xref py py-meth docutils literal"><span class="pre">add_errback()</span></code></a>, and
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callbacks" title="cassandra.cluster.ResponseFuture.add_callbacks"><code class="xref py py-meth docutils literal"><span class="pre">add_callbacks()</span></code></a>, methods.  If you have used
Twisted Python before, this is designed to be a lightweight version of
that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_success</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">process_user</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to process user </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="c1"># don&#39;t re-raise errors in the callback</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">exception</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch user info: </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>


<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">future</span><span class="o">.</span><span class="n">add_callbacks</span><span class="p">(</span><span class="n">handle_success</span><span class="p">,</span> <span class="n">handle_error</span><span class="p">)</span>
</pre></div>
</div>
<dl class="docutils">
<dt>There are a few important things to remember when working with callbacks:</dt>
<dd><ul class="first last simple">
<li><strong>Exceptions that are raised inside the callback functions will be logged and then ignored.</strong></li>
<li>Your callback will be run on the event loop thread, so any long-running
operations will prevent other requests from being handled</li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="setting-a-consistency-level">
<h2>Setting a Consistency Level<a class="headerlink" href="#setting-a-consistency-level" title="Permalink to this headline">¶</a></h2>
<p>The consistency level used for a query determines how many of the
replicas of the data you are interacting with need to respond for
the query to be considered a success.</p>
<p>By default, <a class="reference internal" href="api/cassandra.html#cassandra.ConsistencyLevel.LOCAL_ONE" title="cassandra.ConsistencyLevel.LOCAL_ONE"><code class="xref py py-attr docutils literal"><span class="pre">ConsistencyLevel.LOCAL_ONE</span></code></a> will be used for all queries.
You can specify a different default for the session on <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.default_consistency_level" title="cassandra.cluster.Session.default_consistency_level"><code class="xref py py-attr docutils literal"><span class="pre">Session.default_consistency_level</span></code></a>.
To specify a different consistency level per request, wrap queries
in a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>
<span class="kn">from</span> <span class="nn">cassandra.query</span> <span class="kn">import</span> <span class="n">SimpleStatement</span>

<span class="n">query</span> <span class="o">=</span> <span class="n">SimpleStatement</span><span class="p">(</span>
    <span class="s2">&quot;INSERT INTO users (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="n">consistency_level</span><span class="o">=</span><span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h2>Prepared Statements<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Prepared statements are queries that are parsed by Cassandra and then saved
for later use.  When the driver uses a prepared statement, it only needs to
send the values of parameters to bind.  This lowers network traffic
and CPU utilization within Cassandra because Cassandra does not have to
re-parse the query each time.</p>
<p>To prepare a query, use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">Session.prepare()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>

<span class="n">users</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">user_ids_to_query</span><span class="p">:</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>
    <span class="n">users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">prepare()</span></code></a> returns a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> instance
which can be used in place of <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a> instances or literal
string queries.  It is automatically prepared against all nodes, and the driver
handles re-preparing against new nodes and restarted nodes when necessary.</p>
<p>Note that the placeholders for prepared statements are <code class="docutils literal"><span class="pre">?</span></code> characters.  This
is different than for simple, non-prepared statements (although future versions
of the driver may use the same placeholders for both).</p>
<div class="section" id="setting-a-consistency-level-with-prepared-statements">
<h3>Setting a Consistency Level with Prepared Statements<a class="headerlink" href="#setting-a-consistency-level-with-prepared-statements" title="Permalink to this headline">¶</a></h3>
<p>To specify a consistency level for prepared statements, you have two options.</p>
<p>The first is to set a default consistency level for every execution of the
prepared statement:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;mykeyspace&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span>

<span class="c1"># these will both use QUORUM</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id2</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
<p>The second option is to create a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.BoundStatement" title="cassandra.query.BoundStatement"><code class="xref py py-class docutils literal"><span class="pre">BoundStatement</span></code></a> from the
<a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> and binding parameters and set a consistency
level on that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># override the QUORUM default</span>
<span class="n">user3_lookup</span> <span class="o">=</span> <span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">bind</span><span class="p">([</span><span class="n">user_id3</span><span class="p">])</span>
<span class="n">user3_lookup</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">ALL</span>
<span class="n">user3</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user3_lookup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             >next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2013-2017 DataStax.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3.
    </div>
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Getting Started &#8212; Cassandra Driver 3.11.0 documentation</title>

    <link rel="stylesheet" href="_static/custom.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />

    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '3.11.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Upgrading" href="upgrading.html" />
    <link rel="prev" title="Installation" href="installation.html" />
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Getting Started</a><ul>
<li><a class="reference internal" href="#connecting-to-cassandra">Connecting to Cassandra</a></li>
<li><a class="reference internal" href="#executing-queries">Executing Queries</a><ul>
<li><a class="reference internal" href="#passing-parameters-to-cql-queries">Passing Parameters to CQL Queries</a></li>
<li><a class="reference internal" href="#type-conversions">Type Conversions</a></li>
<li><a class="reference internal" href="#asynchronous-queries">Asynchronous Queries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#setting-a-consistency-level">Setting a Consistency Level</a></li>
<li><a class="reference internal" href="#id2">Prepared Statements</a><ul>
<li><a class="reference internal" href="#setting-a-consistency-level-with-prepared-statements">Setting a Consistency Level with Prepared Statements</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="installation.html"
                        title="previous chapter">Installation</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="upgrading.html"
                        title="next chapter">Upgrading</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/getting_started.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <div><input type="text" name="q" /></div>
      <div><input type="submit" value="Go" /></div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">

  <div class="section" id="getting-started">
<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
<p>First, make sure you have the driver properly <a class="reference internal" href="installation.html"><span class="doc">installed</span></a>.</p>
<div class="section" id="connecting-to-cassandra">
<h2>Connecting to Cassandra<a class="headerlink" href="#connecting-to-cassandra" title="Permalink to this headline">¶</a></h2>
<p>Before we can start executing any queries against a Cassandra cluster we need to setup
an instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a>. As the name suggests, you will typically have one
instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> for each Cassandra cluster you want to interact
with.</p>
<p>The simplest way to create a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
</pre></div>
</div>
<p>This will attempt to connection to a Cassandra instance on your
local machine (127.0.0.1).  You can also specify a list of IP
addresses for nodes in your cluster:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">([</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>The set of IP addresses we pass to the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is simply
an initial set of contact points.  After the driver connects to one
of these nodes it will <em>automatically discover</em> the rest of the
nodes in the cluster and connect to them, so you don&#8217;t need to list
every node in your cluster.</p>
<p>If you need to use a non-standard port, use SSL, or customize the driver&#8217;s
behavior in some other way, this is the place to do it:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>
<span class="kn">from</span> <span class="nn">cassandra.policies</span> <span class="kn">import</span> <span class="n">DCAwareRoundRobinPolicy</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">(</span>
    <span class="p">[</span><span class="s1">&#39;10.1.1.3&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.4&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.5&#39;</span><span class="p">],</span>
    <span class="n">load_balancing_policy</span><span class="o">=</span><span class="n">DCAwareRoundRobinPolicy</span><span class="p">(</span><span class="n">local_dc</span><span class="o">=</span><span class="s1">&#39;US_EAST&#39;</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9042</span><span class="p">)</span>
</pre></div>
</div>
<p>You can find a more complete list of options in the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> documentation.</p>
<p>Instantiating a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> does not actually connect us to any nodes.
To establish connections and begin executing queries we need a
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>, which is created by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">Cluster.connect()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">connect()</span></code></a> method takes an optional <code class="docutils literal"><span class="pre">keyspace</span></code> argument
which sets the default keyspace for all queries made through that <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mykeyspace&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>You can always change a Session&#8217;s keyspace using <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.set_keyspace" title="cassandra.cluster.Session.set_keyspace"><code class="xref py py-meth docutils literal"><span class="pre">set_keyspace()</span></code></a> or
by executing a <code class="docutils literal"><span class="pre">USE</span> <span class="pre">&lt;keyspace&gt;</span></code> query:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">set_keyspace</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span>
<span class="c1"># or you can do this instead</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;USE users&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="executing-queries">
<h2>Executing Queries<a class="headerlink" href="#executing-queries" title="Permalink to this headline">¶</a></h2>
<p>Now that we have a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a> we can begin to execute queries. The simplest
way to execute a query is to use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute" title="cassandra.cluster.Session.execute"><code class="xref py py-meth docutils literal"><span class="pre">execute()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user_row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">user_row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<p>This will transparently pick a Cassandra node to execute the query against
and handle any retries that are necessary if the operation fails.</p>
<p>By default, each row in the result set will be a
<a class="reference external" href="http://docs.python.org/2/library/collections.html#collections.namedtuple">namedtuple</a>.
Each row will have a matching attribute for each column defined in the schema,
such as <code class="docutils literal"><span class="pre">name</span></code>, <code class="docutils literal"><span class="pre">age</span></code>, and so on.  You can also treat them as normal tuples
by unpacking them or accessing fields by position.  The following three
examples are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
</div>
<p>If you prefer another result format, such as a <code class="docutils literal"><span class="pre">dict</span></code> per row, you
can change the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.row_factory" title="cassandra.cluster.Session.row_factory"><code class="xref py py-attr docutils literal"><span class="pre">row_factory</span></code></a> attribute.</p>
<p>For queries that will be run repeatedly, you should use
<a class="reference external" href="#prepared-statements">Prepared statements</a>.</p>
<div class="section" id="passing-parameters-to-cql-queries">
<h3>Passing Parameters to CQL Queries<a class="headerlink" href="#passing-parameters-to-cql-queries" title="Permalink to this headline">¶</a></h3>
<p>When executing non-prepared statements, the driver supports two forms of
parameter place-holders: positional and named.</p>
<p>Positional parameters are used with a <code class="docutils literal"><span class="pre">%s</span></code> placeholder.  For example,
when you execute:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id)</span>
<span class="sd">    VALUES (%s, %s, %s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">(</span><span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">())</span>
<span class="p">)</span>
</pre></div>
</div>
<p>It is translated to the following CQL query:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">credits</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="n">VALUES</span> <span class="p">(</span><span class="s1">&#39;John O&#39;&#39;Reilly&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">2644</span><span class="n">bada</span><span class="o">-</span><span class="mi">852</span><span class="n">c</span><span class="o">-</span><span class="mf">11e3</span><span class="o">-</span><span class="mi">89</span><span class="n">fb</span><span class="o">-</span><span class="n">e0b9a54a6d93</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you should use <code class="docutils literal"><span class="pre">%s</span></code> for all types of arguments, not just strings.
For example, this would be <strong>wrong</strong>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO USERS (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%d</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>  <span class="c1"># wrong</span>
</pre></div>
</div>
<p>Instead, use <code class="docutils literal"><span class="pre">%s</span></code> for the age placeholder.</p>
<p>If you need to use a literal <code class="docutils literal"><span class="pre">%</span></code> character, use <code class="docutils literal"><span class="pre">%%</span></code>.</p>
<p><strong>Note</strong>: you must always use a sequence for the second argument, even if you are
only passing in a single variable:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="s2">&quot;blah&quot;</span><span class="p">)</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">))</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="p">))</span>  <span class="c1"># right</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;blah&quot;</span><span class="p">])</span>  <span class="c1"># right</span>
</pre></div>
</div>
<p>Note that the second line is incorrect because in Python, single-element tuples
require a comma.</p>
<p>Named place-holders use the <code class="docutils literal"><span class="pre">%(name)s</span></code> form:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id, username)</span>
<span class="sd">    VALUES (%(name)s, %(credits)s, %(user_id)s, %(name)s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="s1">&#39;credits&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">()}</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note that you can repeat placeholders with the same name, such as <code class="docutils literal"><span class="pre">%(name)s</span></code>
in the above example.</p>
<p>Only data values should be supplied this way.  Other items, such as keyspaces,
table names, and column names should be set ahead of time (typically using
normal string formatting).</p>
</div>
<div class="section" id="type-conversions">
<span id="id1"></span><h3>Type Conversions<a class="headerlink" href="#type-conversions" title="Permalink to this headline">¶</a></h3>
<p>For non-prepared statements, Python types are cast to CQL literals in the
following way:</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Python Type</th>
<th class="head">CQL Literal Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">None</span></code></td>
<td><code class="docutils literal"><span class="pre">NULL</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">bool</span></code></td>
<td><code class="docutils literal"><span class="pre">boolean</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">float</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">float</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">double</span></code></div>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">long</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bigint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">smallint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tinyint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">counter</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">decimal.Decimal</span></code></td>
<td><code class="docutils literal"><span class="pre">decimal</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">str</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">unicode</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">ascii</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varchar</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">text</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">buffer</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bytearray</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">blob</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">date</span></code></td>
<td><code class="docutils literal"><span class="pre">date</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">datetime</span></code></td>
<td><code class="docutils literal"><span class="pre">timestamp</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">time</span></code></td>
<td><code class="docutils literal"><span class="pre">time</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">list</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tuple</span></code></div>
<div class="line">generator</div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">list</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">set</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">frozenset</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">set</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">dict</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">OrderedDict</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">map</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">uuid.UUID</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">timeuuid</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">uuid</span></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="asynchronous-queries">
<h3>Asynchronous Queries<a class="headerlink" href="#asynchronous-queries" title="Permalink to this headline">¶</a></h3>
<p>The driver supports asynchronous query execution through
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute_async" title="cassandra.cluster.Session.execute_async"><code class="xref py py-meth docutils literal"><span class="pre">execute_async()</span></code></a>.  Instead of waiting for the query to
complete and returning rows directly, this method almost immediately
returns a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture" title="cassandra.cluster.ResponseFuture"><code class="xref py py-class docutils literal"><span class="pre">ResponseFuture</span></code></a> object.  There are two ways of
getting the final result from this object.</p>
<p>The first is by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a> on it. If
the query has not yet completed, this will block until it has and
then return the result or raise an Exception if an error occurred.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ReadTimeout</span>

<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># ... do some other work</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
<span class="k">except</span> <span class="n">ReadTimeout</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&quot;Query timed out:&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This works well for executing many queries concurrently:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># build a list of futures</span>
<span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">ids_to_fetch</span><span class="p">:</span>
    <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># wait for them to complete and use the results</span>
<span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">futures</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>
<p>Alternatively, instead of calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a>,
you can attach callback and errback functions through the
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callback" title="cassandra.cluster.ResponseFuture.add_callback"><code class="xref py py-meth docutils literal"><span class="pre">add_callback()</span></code></a>,
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_errback" title="cassandra.cluster.ResponseFuture.add_errback"><code class="xref py py-meth docutils literal"><span class="pre">add_errback()</span></code></a>, and
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callbacks" title="cassandra.cluster.ResponseFuture.add_callbacks"><code class="xref py py-meth docutils literal"><span class="pre">add_callbacks()</span></code></a>, methods.  If you have used
Twisted Python before, this is designed to be a lightweight version of
that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_success</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">process_user</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to process user </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="c1"># don&#39;t re-raise errors in the callback</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">exception</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch user info: </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>


<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">future</span><span class="o">.</span><span class="n">add_callbacks</span><span class="p">(</span><span class="n">handle_success</span><span class="p">,</span> <span class="n">handle_error</span><span class="p">)</span>
</pre></div>
</div>
<dl class="docutils">
<dt>There are a few important things to remember when working with callbacks:</dt>
<dd><ul class="first last simple">
<li><strong>Exceptions that are raised inside the callback functions will be logged and then ignored.</strong></li>
<li>Your callback will be run on the event loop thread, so any long-running
operations will prevent other requests from being handled</li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="setting-a-consistency-level">
<h2>Setting a Consistency Level<a class="headerlink" href="#setting-a-consistency-level" title="Permalink to this headline">¶</a></h2>
<p>The consistency level used for a query determines how many of the
replicas of the data you are interacting with need to respond for
the query to be considered a success.</p>
<p>By default, <a class="reference internal" href="api/cassandra.html#cassandra.ConsistencyLevel.LOCAL_ONE" title="cassandra.ConsistencyLevel.LOCAL_ONE"><code class="xref py py-attr docutils literal"><span class="pre">ConsistencyLevel.LOCAL_ONE</span></code></a> will be used for all queries.
You can specify a different default for the session on <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.default_consistency_level" title="cassandra.cluster.Session.default_consistency_level"><code class="xref py py-attr docutils literal"><span class="pre">Session.default_consistency_level</span></code></a>.
To specify a different consistency level per request, wrap queries
in a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>
<span class="kn">from</span> <span class="nn">cassandra.query</span> <span class="kn">import</span> <span class="n">SimpleStatement</span>

<span class="n">query</span> <span class="o">=</span> <span class="n">SimpleStatement</span><span class="p">(</span>
    <span class="s2">&quot;INSERT INTO users (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="n">consistency_level</span><span class="o">=</span><span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h2>Prepared Statements<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Prepared statements are queries that are parsed by Cassandra and then saved
for later use.  When the driver uses a prepared statement, it only needs to
send the values of parameters to bind.  This lowers network traffic
and CPU utilization within Cassandra because Cassandra does not have to
re-parse the query each time.</p>
<p>To prepare a query, use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">Session.prepare()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>

<span class="n">users</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">user_ids_to_query</span><span class="p">:</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>
    <span class="n">users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">prepare()</span></code></a> returns a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> instance
which can be used in place of <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a> instances or literal
string queries.  It is automatically prepared against all nodes, and the driver
handles re-preparing against new nodes and restarted nodes when necessary.</p>
<p>Note that the placeholders for prepared statements are <code class="docutils literal"><span class="pre">?</span></code> characters.  This
is different than for simple, non-prepared statements (although future versions
of the driver may use the same placeholders for both).</p>
<div class="section" id="setting-a-consistency-level-with-prepared-statements">
<h3>Setting a Consistency Level with Prepared Statements<a class="headerlink" href="#setting-a-consistency-level-with-prepared-statements" title="Permalink to this headline">¶</a></h3>
<p>To specify a consistency level for prepared statements, you have two options.</p>
<p>The first is to set a default consistency level for every execution of the
prepared statement:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;mykeyspace&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span>

<span class="c1"># these will both use QUORUM</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id2</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
<p>The second option is to create a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.BoundStatement" title="cassandra.query.BoundStatement"><code class="xref py py-class docutils literal"><span class="pre">BoundStatement</span></code></a> from the
<a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> and binding parameters and set a consistency
level on that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># override the QUORUM default</span>
<span class="n">user3_lookup</span> <span class="o">=</span> <span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">bind</span><span class="p">([</span><span class="n">user_id3</span><span class="p">])</span>
<span class="n">user3_lookup</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">ALL</span>
<span class="n">user3</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user3_lookup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             >next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2013-2017 DataStax.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3.
    </div>
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Getting Started &#8212; Cassandra Driver 3.11.0 documentation</title>

    <link rel="stylesheet" href="_static/custom.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />

    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '3.11.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Upgrading" href="upgrading.html" />
    <link rel="prev" title="Installation" href="installation.html" />
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Getting Started</a><ul>
<li><a class="reference internal" href="#connecting-to-cassandra">Connecting to Cassandra</a></li>
<li><a class="reference internal" href="#executing-queries">Executing Queries</a><ul>
<li><a class="reference internal" href="#passing-parameters-to-cql-queries">Passing Parameters to CQL Queries</a></li>
<li><a class="reference internal" href="#type-conversions">Type Conversions</a></li>
<li><a class="reference internal" href="#asynchronous-queries">Asynchronous Queries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#setting-a-consistency-level">Setting a Consistency Level</a></li>
<li><a class="reference internal" href="#id2">Prepared Statements</a><ul>
<li><a class="reference internal" href="#setting-a-consistency-level-with-prepared-statements">Setting a Consistency Level with Prepared Statements</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="installation.html"
                        title="previous chapter">Installation</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="upgrading.html"
                        title="next chapter">Upgrading</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/getting_started.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <div><input type="text" name="q" /></div>
      <div><input type="submit" value="Go" /></div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">

  <div class="section" id="getting-started">
<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
<p>First, make sure you have the driver properly <a class="reference internal" href="installation.html"><span class="doc">installed</span></a>.</p>
<div class="section" id="connecting-to-cassandra">
<h2>Connecting to Cassandra<a class="headerlink" href="#connecting-to-cassandra" title="Permalink to this headline">¶</a></h2>
<p>Before we can start executing any queries against a Cassandra cluster we need to setup
an instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a>. As the name suggests, you will typically have one
instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> for each Cassandra cluster you want to interact
with.</p>
<p>The simplest way to create a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
</pre></div>
</div>
<p>This will attempt to connection to a Cassandra instance on your
local machine (127.0.0.1).  You can also specify a list of IP
addresses for nodes in your cluster:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">([</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>The set of IP addresses we pass to the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is simply
an initial set of contact points.  After the driver connects to one
of these nodes it will <em>automatically discover</em> the rest of the
nodes in the cluster and connect to them, so you don&#8217;t need to list
every node in your cluster.</p>
<p>If you need to use a non-standard port, use SSL, or customize the driver&#8217;s
behavior in some other way, this is the place to do it:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>
<span class="kn">from</span> <span class="nn">cassandra.policies</span> <span class="kn">import</span> <span class="n">DCAwareRoundRobinPolicy</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">(</span>
    <span class="p">[</span><span class="s1">&#39;10.1.1.3&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.4&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.5&#39;</span><span class="p">],</span>
    <span class="n">load_balancing_policy</span><span class="o">=</span><span class="n">DCAwareRoundRobinPolicy</span><span class="p">(</span><span class="n">local_dc</span><span class="o">=</span><span class="s1">&#39;US_EAST&#39;</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9042</span><span class="p">)</span>
</pre></div>
</div>
<p>You can find a more complete list of options in the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> documentation.</p>
<p>Instantiating a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> does not actually connect us to any nodes.
To establish connections and begin executing queries we need a
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>, which is created by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">Cluster.connect()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">connect()</span></code></a> method takes an optional <code class="docutils literal"><span class="pre">keyspace</span></code> argument
which sets the default keyspace for all queries made through that <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mykeyspace&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>You can always change a Session&#8217;s keyspace using <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.set_keyspace" title="cassandra.cluster.Session.set_keyspace"><code class="xref py py-meth docutils literal"><span class="pre">set_keyspace()</span></code></a> or
by executing a <code class="docutils literal"><span class="pre">USE</span> <span class="pre">&lt;keyspace&gt;</span></code> query:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">set_keyspace</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span>
<span class="c1"># or you can do this instead</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;USE users&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="executing-queries">
<h2>Executing Queries<a class="headerlink" href="#executing-queries" title="Permalink to this headline">¶</a></h2>
<p>Now that we have a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a> we can begin to execute queries. The simplest
way to execute a query is to use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute" title="cassandra.cluster.Session.execute"><code class="xref py py-meth docutils literal"><span class="pre">execute()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user_row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">user_row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<p>This will transparently pick a Cassandra node to execute the query against
and handle any retries that are necessary if the operation fails.</p>
<p>By default, each row in the result set will be a
<a class="reference external" href="http://docs.python.org/2/library/collections.html#collections.namedtuple">namedtuple</a>.
Each row will have a matching attribute for each column defined in the schema,
such as <code class="docutils literal"><span class="pre">name</span></code>, <code class="docutils literal"><span class="pre">age</span></code>, and so on.  You can also treat them as normal tuples
by unpacking them or accessing fields by position.  The following three
examples are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
</div>
<p>If you prefer another result format, such as a <code class="docutils literal"><span class="pre">dict</span></code> per row, you
can change the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.row_factory" title="cassandra.cluster.Session.row_factory"><code class="xref py py-attr docutils literal"><span class="pre">row_factory</span></code></a> attribute.</p>
<p>For queries that will be run repeatedly, you should use
<a class="reference external" href="#prepared-statements">Prepared statements</a>.</p>
<div class="section" id="passing-parameters-to-cql-queries">
<h3>Passing Parameters to CQL Queries<a class="headerlink" href="#passing-parameters-to-cql-queries" title="Permalink to this headline">¶</a></h3>
<p>When executing non-prepared statements, the driver supports two forms of
parameter place-holders: positional and named.</p>
<p>Positional parameters are used with a <code class="docutils literal"><span class="pre">%s</span></code> placeholder.  For example,
when you execute:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id)</span>
<span class="sd">    VALUES (%s, %s, %s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">(</span><span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">())</span>
<span class="p">)</span>
</pre></div>
</div>
<p>It is translated to the following CQL query:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">credits</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="n">VALUES</span> <span class="p">(</span><span class="s1">&#39;John O&#39;&#39;Reilly&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">2644</span><span class="n">bada</span><span class="o">-</span><span class="mi">852</span><span class="n">c</span><span class="o">-</span><span class="mf">11e3</span><span class="o">-</span><span class="mi">89</span><span class="n">fb</span><span class="o">-</span><span class="n">e0b9a54a6d93</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you should use <code class="docutils literal"><span class="pre">%s</span></code> for all types of arguments, not just strings.
For example, this would be <strong>wrong</strong>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO USERS (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%d</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>  <span class="c1"># wrong</span>
</pre></div>
</div>
<p>Instead, use <code class="docutils literal"><span class="pre">%s</span></code> for the age placeholder.</p>
<p>If you need to use a literal <code class="docutils literal"><span class="pre">%</span></code> character, use <code class="docutils literal"><span class="pre">%%</span></code>.</p>
<p><strong>Note</strong>: you must always use a sequence for the second argument, even if you are
only passing in a single variable:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="s2">&quot;blah&quot;</span><span class="p">)</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">))</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="p">))</span>  <span class="c1"># right</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;blah&quot;</span><span class="p">])</span>  <span class="c1"># right</span>
</pre></div>
</div>
<p>Note that the second line is incorrect because in Python, single-element tuples
require a comma.</p>
<p>Named place-holders use the <code class="docutils literal"><span class="pre">%(name)s</span></code> form:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id, username)</span>
<span class="sd">    VALUES (%(name)s, %(credits)s, %(user_id)s, %(name)s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="s1">&#39;credits&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">()}</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note that you can repeat placeholders with the same name, such as <code class="docutils literal"><span class="pre">%(name)s</span></code>
in the above example.</p>
<p>Only data values should be supplied this way.  Other items, such as keyspaces,
table names, and column names should be set ahead of time (typically using
normal string formatting).</p>
</div>
<div class="section" id="type-conversions">
<span id="id1"></span><h3>Type Conversions<a class="headerlink" href="#type-conversions" title="Permalink to this headline">¶</a></h3>
<p>For non-prepared statements, Python types are cast to CQL literals in the
following way:</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Python Type</th>
<th class="head">CQL Literal Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">None</span></code></td>
<td><code class="docutils literal"><span class="pre">NULL</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">bool</span></code></td>
<td><code class="docutils literal"><span class="pre">boolean</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">float</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">float</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">double</span></code></div>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">long</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bigint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">smallint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tinyint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">counter</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">decimal.Decimal</span></code></td>
<td><code class="docutils literal"><span class="pre">decimal</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">str</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">unicode</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">ascii</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varchar</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">text</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">buffer</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bytearray</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">blob</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">date</span></code></td>
<td><code class="docutils literal"><span class="pre">date</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">datetime</span></code></td>
<td><code class="docutils literal"><span class="pre">timestamp</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">time</span></code></td>
<td><code class="docutils literal"><span class="pre">time</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">list</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tuple</span></code></div>
<div class="line">generator</div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">list</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">set</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">frozenset</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">set</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">dict</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">OrderedDict</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">map</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">uuid.UUID</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">timeuuid</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">uuid</span></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="asynchronous-queries">
<h3>Asynchronous Queries<a class="headerlink" href="#asynchronous-queries" title="Permalink to this headline">¶</a></h3>
<p>The driver supports asynchronous query execution through
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute_async" title="cassandra.cluster.Session.execute_async"><code class="xref py py-meth docutils literal"><span class="pre">execute_async()</span></code></a>.  Instead of waiting for the query to
complete and returning rows directly, this method almost immediately
returns a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture" title="cassandra.cluster.ResponseFuture"><code class="xref py py-class docutils literal"><span class="pre">ResponseFuture</span></code></a> object.  There are two ways of
getting the final result from this object.</p>
<p>The first is by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a> on it. If
the query has not yet completed, this will block until it has and
then return the result or raise an Exception if an error occurred.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ReadTimeout</span>

<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># ... do some other work</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
<span class="k">except</span> <span class="n">ReadTimeout</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&quot;Query timed out:&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This works well for executing many queries concurrently:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># build a list of futures</span>
<span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">ids_to_fetch</span><span class="p">:</span>
    <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># wait for them to complete and use the results</span>
<span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">futures</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>
<p>Alternatively, instead of calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a>,
you can attach callback and errback functions through the
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callback" title="cassandra.cluster.ResponseFuture.add_callback"><code class="xref py py-meth docutils literal"><span class="pre">add_callback()</span></code></a>,
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_errback" title="cassandra.cluster.ResponseFuture.add_errback"><code class="xref py py-meth docutils literal"><span class="pre">add_errback()</span></code></a>, and
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callbacks" title="cassandra.cluster.ResponseFuture.add_callbacks"><code class="xref py py-meth docutils literal"><span class="pre">add_callbacks()</span></code></a>, methods.  If you have used
Twisted Python before, this is designed to be a lightweight version of
that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_success</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">process_user</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to process user </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="c1"># don&#39;t re-raise errors in the callback</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">exception</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch user info: </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>


<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">future</span><span class="o">.</span><span class="n">add_callbacks</span><span class="p">(</span><span class="n">handle_success</span><span class="p">,</span> <span class="n">handle_error</span><span class="p">)</span>
</pre></div>
</div>
<dl class="docutils">
<dt>There are a few important things to remember when working with callbacks:</dt>
<dd><ul class="first last simple">
<li><strong>Exceptions that are raised inside the callback functions will be logged and then ignored.</strong></li>
<li>Your callback will be run on the event loop thread, so any long-running
operations will prevent other requests from being handled</li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="setting-a-consistency-level">
<h2>Setting a Consistency Level<a class="headerlink" href="#setting-a-consistency-level" title="Permalink to this headline">¶</a></h2>
<p>The consistency level used for a query determines how many of the
replicas of the data you are interacting with need to respond for
the query to be considered a success.</p>
<p>By default, <a class="reference internal" href="api/cassandra.html#cassandra.ConsistencyLevel.LOCAL_ONE" title="cassandra.ConsistencyLevel.LOCAL_ONE"><code class="xref py py-attr docutils literal"><span class="pre">ConsistencyLevel.LOCAL_ONE</span></code></a> will be used for all queries.
You can specify a different default for the session on <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.default_consistency_level" title="cassandra.cluster.Session.default_consistency_level"><code class="xref py py-attr docutils literal"><span class="pre">Session.default_consistency_level</span></code></a>.
To specify a different consistency level per request, wrap queries
in a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>
<span class="kn">from</span> <span class="nn">cassandra.query</span> <span class="kn">import</span> <span class="n">SimpleStatement</span>

<span class="n">query</span> <span class="o">=</span> <span class="n">SimpleStatement</span><span class="p">(</span>
    <span class="s2">&quot;INSERT INTO users (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="n">consistency_level</span><span class="o">=</span><span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h2>Prepared Statements<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Prepared statements are queries that are parsed by Cassandra and then saved
for later use.  When the driver uses a prepared statement, it only needs to
send the values of parameters to bind.  This lowers network traffic
and CPU utilization within Cassandra because Cassandra does not have to
re-parse the query each time.</p>
<p>To prepare a query, use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">Session.prepare()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>

<span class="n">users</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">user_ids_to_query</span><span class="p">:</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>
    <span class="n">users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">prepare()</span></code></a> returns a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> instance
which can be used in place of <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a> instances or literal
string queries.  It is automatically prepared against all nodes, and the driver
handles re-preparing against new nodes and restarted nodes when necessary.</p>
<p>Note that the placeholders for prepared statements are <code class="docutils literal"><span class="pre">?</span></code> characters.  This
is different than for simple, non-prepared statements (although future versions
of the driver may use the same placeholders for both).</p>
<div class="section" id="setting-a-consistency-level-with-prepared-statements">
<h3>Setting a Consistency Level with Prepared Statements<a class="headerlink" href="#setting-a-consistency-level-with-prepared-statements" title="Permalink to this headline">¶</a></h3>
<p>To specify a consistency level for prepared statements, you have two options.</p>
<p>The first is to set a default consistency level for every execution of the
prepared statement:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;mykeyspace&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span>

<span class="c1"># these will both use QUORUM</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id2</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
<p>The second option is to create a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.BoundStatement" title="cassandra.query.BoundStatement"><code class="xref py py-class docutils literal"><span class="pre">BoundStatement</span></code></a> from the
<a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> and binding parameters and set a consistency
level on that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># override the QUORUM default</span>
<span class="n">user3_lookup</span> <span class="o">=</span> <span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">bind</span><span class="p">([</span><span class="n">user_id3</span><span class="p">])</span>
<span class="n">user3_lookup</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">ALL</span>
<span class="n">user3</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user3_lookup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             >next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2013-2017 DataStax.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3.
    </div>
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Getting Started &#8212; Cassandra Driver 3.11.0 documentation</title>

    <link rel="stylesheet" href="_static/custom.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />

    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '3.11.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Upgrading" href="upgrading.html" />
    <link rel="prev" title="Installation" href="installation.html" />
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Getting Started</a><ul>
<li><a class="reference internal" href="#connecting-to-cassandra">Connecting to Cassandra</a></li>
<li><a class="reference internal" href="#executing-queries">Executing Queries</a><ul>
<li><a class="reference internal" href="#passing-parameters-to-cql-queries">Passing Parameters to CQL Queries</a></li>
<li><a class="reference internal" href="#type-conversions">Type Conversions</a></li>
<li><a class="reference internal" href="#asynchronous-queries">Asynchronous Queries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#setting-a-consistency-level">Setting a Consistency Level</a></li>
<li><a class="reference internal" href="#id2">Prepared Statements</a><ul>
<li><a class="reference internal" href="#setting-a-consistency-level-with-prepared-statements">Setting a Consistency Level with Prepared Statements</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="installation.html"
                        title="previous chapter">Installation</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="upgrading.html"
                        title="next chapter">Upgrading</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/getting_started.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <div><input type="text" name="q" /></div>
      <div><input type="submit" value="Go" /></div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">

  <div class="section" id="getting-started">
<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
<p>First, make sure you have the driver properly <a class="reference internal" href="installation.html"><span class="doc">installed</span></a>.</p>
<div class="section" id="connecting-to-cassandra">
<h2>Connecting to Cassandra<a class="headerlink" href="#connecting-to-cassandra" title="Permalink to this headline">¶</a></h2>
<p>Before we can start executing any queries against a Cassandra cluster we need to setup
an instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a>. As the name suggests, you will typically have one
instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> for each Cassandra cluster you want to interact
with.</p>
<p>The simplest way to create a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
</pre></div>
</div>
<p>This will attempt to connection to a Cassandra instance on your
local machine (127.0.0.1).  You can also specify a list of IP
addresses for nodes in your cluster:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">([</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>The set of IP addresses we pass to the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is simply
an initial set of contact points.  After the driver connects to one
of these nodes it will <em>automatically discover</em> the rest of the
nodes in the cluster and connect to them, so you don&#8217;t need to list
every node in your cluster.</p>
<p>If you need to use a non-standard port, use SSL, or customize the driver&#8217;s
behavior in some other way, this is the place to do it:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>
<span class="kn">from</span> <span class="nn">cassandra.policies</span> <span class="kn">import</span> <span class="n">DCAwareRoundRobinPolicy</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">(</span>
    <span class="p">[</span><span class="s1">&#39;10.1.1.3&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.4&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.5&#39;</span><span class="p">],</span>
    <span class="n">load_balancing_policy</span><span class="o">=</span><span class="n">DCAwareRoundRobinPolicy</span><span class="p">(</span><span class="n">local_dc</span><span class="o">=</span><span class="s1">&#39;US_EAST&#39;</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9042</span><span class="p">)</span>
</pre></div>
</div>
<p>You can find a more complete list of options in the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> documentation.</p>
<p>Instantiating a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> does not actually connect us to any nodes.
To establish connections and begin executing queries we need a
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>, which is created by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">Cluster.connect()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">connect()</span></code></a> method takes an optional <code class="docutils literal"><span class="pre">keyspace</span></code> argument
which sets the default keyspace for all queries made through that <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mykeyspace&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>You can always change a Session&#8217;s keyspace using <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.set_keyspace" title="cassandra.cluster.Session.set_keyspace"><code class="xref py py-meth docutils literal"><span class="pre">set_keyspace()</span></code></a> or
by executing a <code class="docutils literal"><span class="pre">USE</span> <span class="pre">&lt;keyspace&gt;</span></code> query:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">set_keyspace</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span>
<span class="c1"># or you can do this instead</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;USE users&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="executing-queries">
<h2>Executing Queries<a class="headerlink" href="#executing-queries" title="Permalink to this headline">¶</a></h2>
<p>Now that we have a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a> we can begin to execute queries. The simplest
way to execute a query is to use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute" title="cassandra.cluster.Session.execute"><code class="xref py py-meth docutils literal"><span class="pre">execute()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user_row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">user_row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<p>This will transparently pick a Cassandra node to execute the query against
and handle any retries that are necessary if the operation fails.</p>
<p>By default, each row in the result set will be a
<a class="reference external" href="http://docs.python.org/2/library/collections.html#collections.namedtuple">namedtuple</a>.
Each row will have a matching attribute for each column defined in the schema,
such as <code class="docutils literal"><span class="pre">name</span></code>, <code class="docutils literal"><span class="pre">age</span></code>, and so on.  You can also treat them as normal tuples
by unpacking them or accessing fields by position.  The following three
examples are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
</div>
<p>If you prefer another result format, such as a <code class="docutils literal"><span class="pre">dict</span></code> per row, you
can change the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.row_factory" title="cassandra.cluster.Session.row_factory"><code class="xref py py-attr docutils literal"><span class="pre">row_factory</span></code></a> attribute.</p>
<p>For queries that will be run repeatedly, you should use
<a class="reference external" href="#prepared-statements">Prepared statements</a>.</p>
<div class="section" id="passing-parameters-to-cql-queries">
<h3>Passing Parameters to CQL Queries<a class="headerlink" href="#passing-parameters-to-cql-queries" title="Permalink to this headline">¶</a></h3>
<p>When executing non-prepared statements, the driver supports two forms of
parameter place-holders: positional and named.</p>
<p>Positional parameters are used with a <code class="docutils literal"><span class="pre">%s</span></code> placeholder.  For example,
when you execute:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id)</span>
<span class="sd">    VALUES (%s, %s, %s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">(</span><span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">())</span>
<span class="p">)</span>
</pre></div>
</div>
<p>It is translated to the following CQL query:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">credits</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="n">VALUES</span> <span class="p">(</span><span class="s1">&#39;John O&#39;&#39;Reilly&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">2644</span><span class="n">bada</span><span class="o">-</span><span class="mi">852</span><span class="n">c</span><span class="o">-</span><span class="mf">11e3</span><span class="o">-</span><span class="mi">89</span><span class="n">fb</span><span class="o">-</span><span class="n">e0b9a54a6d93</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you should use <code class="docutils literal"><span class="pre">%s</span></code> for all types of arguments, not just strings.
For example, this would be <strong>wrong</strong>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO USERS (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%d</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>  <span class="c1"># wrong</span>
</pre></div>
</div>
<p>Instead, use <code class="docutils literal"><span class="pre">%s</span></code> for the age placeholder.</p>
<p>If you need to use a literal <code class="docutils literal"><span class="pre">%</span></code> character, use <code class="docutils literal"><span class="pre">%%</span></code>.</p>
<p><strong>Note</strong>: you must always use a sequence for the second argument, even if you are
only passing in a single variable:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="s2">&quot;blah&quot;</span><span class="p">)</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">))</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="p">))</span>  <span class="c1"># right</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;blah&quot;</span><span class="p">])</span>  <span class="c1"># right</span>
</pre></div>
</div>
<p>Note that the second line is incorrect because in Python, single-element tuples
require a comma.</p>
<p>Named place-holders use the <code class="docutils literal"><span class="pre">%(name)s</span></code> form:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id, username)</span>
<span class="sd">    VALUES (%(name)s, %(credits)s, %(user_id)s, %(name)s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="s1">&#39;credits&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">()}</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note that you can repeat placeholders with the same name, such as <code class="docutils literal"><span class="pre">%(name)s</span></code>
in the above example.</p>
<p>Only data values should be supplied this way.  Other items, such as keyspaces,
table names, and column names should be set ahead of time (typically using
normal string formatting).</p>
</div>
<div class="section" id="type-conversions">
<span id="id1"></span><h3>Type Conversions<a class="headerlink" href="#type-conversions" title="Permalink to this headline">¶</a></h3>
<p>For non-prepared statements, Python types are cast to CQL literals in the
following way:</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Python Type</th>
<th class="head">CQL Literal Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">None</span></code></td>
<td><code class="docutils literal"><span class="pre">NULL</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">bool</span></code></td>
<td><code class="docutils literal"><span class="pre">boolean</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">float</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">float</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">double</span></code></div>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">long</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bigint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">smallint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tinyint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">counter</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">decimal.Decimal</span></code></td>
<td><code class="docutils literal"><span class="pre">decimal</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">str</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">unicode</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">ascii</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varchar</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">text</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">buffer</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bytearray</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">blob</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">date</span></code></td>
<td><code class="docutils literal"><span class="pre">date</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">datetime</span></code></td>
<td><code class="docutils literal"><span class="pre">timestamp</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">time</span></code></td>
<td><code class="docutils literal"><span class="pre">time</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">list</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tuple</span></code></div>
<div class="line">generator</div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">list</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">set</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">frozenset</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">set</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">dict</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">OrderedDict</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">map</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">uuid.UUID</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">timeuuid</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">uuid</span></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="asynchronous-queries">
<h3>Asynchronous Queries<a class="headerlink" href="#asynchronous-queries" title="Permalink to this headline">¶</a></h3>
<p>The driver supports asynchronous query execution through
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute_async" title="cassandra.cluster.Session.execute_async"><code class="xref py py-meth docutils literal"><span class="pre">execute_async()</span></code></a>.  Instead of waiting for the query to
complete and returning rows directly, this method almost immediately
returns a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture" title="cassandra.cluster.ResponseFuture"><code class="xref py py-class docutils literal"><span class="pre">ResponseFuture</span></code></a> object.  There are two ways of
getting the final result from this object.</p>
<p>The first is by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a> on it. If
the query has not yet completed, this will block until it has and
then return the result or raise an Exception if an error occurred.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ReadTimeout</span>

<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># ... do some other work</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
<span class="k">except</span> <span class="n">ReadTimeout</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&quot;Query timed out:&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This works well for executing many queries concurrently:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># build a list of futures</span>
<span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">ids_to_fetch</span><span class="p">:</span>
    <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># wait for them to complete and use the results</span>
<span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">futures</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>
<p>Alternatively, instead of calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a>,
you can attach callback and errback functions through the
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callback" title="cassandra.cluster.ResponseFuture.add_callback"><code class="xref py py-meth docutils literal"><span class="pre">add_callback()</span></code></a>,
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_errback" title="cassandra.cluster.ResponseFuture.add_errback"><code class="xref py py-meth docutils literal"><span class="pre">add_errback()</span></code></a>, and
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callbacks" title="cassandra.cluster.ResponseFuture.add_callbacks"><code class="xref py py-meth docutils literal"><span class="pre">add_callbacks()</span></code></a>, methods.  If you have used
Twisted Python before, this is designed to be a lightweight version of
that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_success</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">process_user</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to process user </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="c1"># don&#39;t re-raise errors in the callback</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">exception</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch user info: </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>


<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">future</span><span class="o">.</span><span class="n">add_callbacks</span><span class="p">(</span><span class="n">handle_success</span><span class="p">,</span> <span class="n">handle_error</span><span class="p">)</span>
</pre></div>
</div>
<dl class="docutils">
<dt>There are a few important things to remember when working with callbacks:</dt>
<dd><ul class="first last simple">
<li><strong>Exceptions that are raised inside the callback functions will be logged and then ignored.</strong></li>
<li>Your callback will be run on the event loop thread, so any long-running
operations will prevent other requests from being handled</li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="setting-a-consistency-level">
<h2>Setting a Consistency Level<a class="headerlink" href="#setting-a-consistency-level" title="Permalink to this headline">¶</a></h2>
<p>The consistency level used for a query determines how many of the
replicas of the data you are interacting with need to respond for
the query to be considered a success.</p>
<p>By default, <a class="reference internal" href="api/cassandra.html#cassandra.ConsistencyLevel.LOCAL_ONE" title="cassandra.ConsistencyLevel.LOCAL_ONE"><code class="xref py py-attr docutils literal"><span class="pre">ConsistencyLevel.LOCAL_ONE</span></code></a> will be used for all queries.
You can specify a different default for the session on <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.default_consistency_level" title="cassandra.cluster.Session.default_consistency_level"><code class="xref py py-attr docutils literal"><span class="pre">Session.default_consistency_level</span></code></a>.
To specify a different consistency level per request, wrap queries
in a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>
<span class="kn">from</span> <span class="nn">cassandra.query</span> <span class="kn">import</span> <span class="n">SimpleStatement</span>

<span class="n">query</span> <span class="o">=</span> <span class="n">SimpleStatement</span><span class="p">(</span>
    <span class="s2">&quot;INSERT INTO users (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="n">consistency_level</span><span class="o">=</span><span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h2>Prepared Statements<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Prepared statements are queries that are parsed by Cassandra and then saved
for later use.  When the driver uses a prepared statement, it only needs to
send the values of parameters to bind.  This lowers network traffic
and CPU utilization within Cassandra because Cassandra does not have to
re-parse the query each time.</p>
<p>To prepare a query, use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">Session.prepare()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>

<span class="n">users</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">user_ids_to_query</span><span class="p">:</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>
    <span class="n">users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">prepare()</span></code></a> returns a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> instance
which can be used in place of <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a> instances or literal
string queries.  It is automatically prepared against all nodes, and the driver
handles re-preparing against new nodes and restarted nodes when necessary.</p>
<p>Note that the placeholders for prepared statements are <code class="docutils literal"><span class="pre">?</span></code> characters.  This
is different than for simple, non-prepared statements (although future versions
of the driver may use the same placeholders for both).</p>
<div class="section" id="setting-a-consistency-level-with-prepared-statements">
<h3>Setting a Consistency Level with Prepared Statements<a class="headerlink" href="#setting-a-consistency-level-with-prepared-statements" title="Permalink to this headline">¶</a></h3>
<p>To specify a consistency level for prepared statements, you have two options.</p>
<p>The first is to set a default consistency level for every execution of the
prepared statement:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;mykeyspace&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span>

<span class="c1"># these will both use QUORUM</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id2</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
<p>The second option is to create a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.BoundStatement" title="cassandra.query.BoundStatement"><code class="xref py py-class docutils literal"><span class="pre">BoundStatement</span></code></a> from the
<a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> and binding parameters and set a consistency
level on that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># override the QUORUM default</span>
<span class="n">user3_lookup</span> <span class="o">=</span> <span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">bind</span><span class="p">([</span><span class="n">user_id3</span><span class="p">])</span>
<span class="n">user3_lookup</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">ALL</span>
<span class="n">user3</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user3_lookup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             >next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2013-2017 DataStax.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3.
    </div>
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Getting Started &#8212; Cassandra Driver 3.11.0 documentation</title>

    <link rel="stylesheet" href="_static/custom.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />

    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '3.11.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Upgrading" href="upgrading.html" />
    <link rel="prev" title="Installation" href="installation.html" />
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Getting Started</a><ul>
<li><a class="reference internal" href="#connecting-to-cassandra">Connecting to Cassandra</a></li>
<li><a class="reference internal" href="#executing-queries">Executing Queries</a><ul>
<li><a class="reference internal" href="#passing-parameters-to-cql-queries">Passing Parameters to CQL Queries</a></li>
<li><a class="reference internal" href="#type-conversions">Type Conversions</a></li>
<li><a class="reference internal" href="#asynchronous-queries">Asynchronous Queries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#setting-a-consistency-level">Setting a Consistency Level</a></li>
<li><a class="reference internal" href="#id2">Prepared Statements</a><ul>
<li><a class="reference internal" href="#setting-a-consistency-level-with-prepared-statements">Setting a Consistency Level with Prepared Statements</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="installation.html"
                        title="previous chapter">Installation</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="upgrading.html"
                        title="next chapter">Upgrading</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/getting_started.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <div><input type="text" name="q" /></div>
      <div><input type="submit" value="Go" /></div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">

  <div class="section" id="getting-started">
<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
<p>First, make sure you have the driver properly <a class="reference internal" href="installation.html"><span class="doc">installed</span></a>.</p>
<div class="section" id="connecting-to-cassandra">
<h2>Connecting to Cassandra<a class="headerlink" href="#connecting-to-cassandra" title="Permalink to this headline">¶</a></h2>
<p>Before we can start executing any queries against a Cassandra cluster we need to setup
an instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a>. As the name suggests, you will typically have one
instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> for each Cassandra cluster you want to interact
with.</p>
<p>The simplest way to create a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
</pre></div>
</div>
<p>This will attempt to connection to a Cassandra instance on your
local machine (127.0.0.1).  You can also specify a list of IP
addresses for nodes in your cluster:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">([</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>The set of IP addresses we pass to the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is simply
an initial set of contact points.  After the driver connects to one
of these nodes it will <em>automatically discover</em> the rest of the
nodes in the cluster and connect to them, so you don&#8217;t need to list
every node in your cluster.</p>
<p>If you need to use a non-standard port, use SSL, or customize the driver&#8217;s
behavior in some other way, this is the place to do it:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>
<span class="kn">from</span> <span class="nn">cassandra.policies</span> <span class="kn">import</span> <span class="n">DCAwareRoundRobinPolicy</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">(</span>
    <span class="p">[</span><span class="s1">&#39;10.1.1.3&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.4&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.5&#39;</span><span class="p">],</span>
    <span class="n">load_balancing_policy</span><span class="o">=</span><span class="n">DCAwareRoundRobinPolicy</span><span class="p">(</span><span class="n">local_dc</span><span class="o">=</span><span class="s1">&#39;US_EAST&#39;</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9042</span><span class="p">)</span>
</pre></div>
</div>
<p>You can find a more complete list of options in the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> documentation.</p>
<p>Instantiating a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> does not actually connect us to any nodes.
To establish connections and begin executing queries we need a
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>, which is created by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">Cluster.connect()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">connect()</span></code></a> method takes an optional <code class="docutils literal"><span class="pre">keyspace</span></code> argument
which sets the default keyspace for all queries made through that <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mykeyspace&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>You can always change a Session&#8217;s keyspace using <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.set_keyspace" title="cassandra.cluster.Session.set_keyspace"><code class="xref py py-meth docutils literal"><span class="pre">set_keyspace()</span></code></a> or
by executing a <code class="docutils literal"><span class="pre">USE</span> <span class="pre">&lt;keyspace&gt;</span></code> query:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">set_keyspace</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span>
<span class="c1"># or you can do this instead</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;USE users&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="executing-queries">
<h2>Executing Queries<a class="headerlink" href="#executing-queries" title="Permalink to this headline">¶</a></h2>
<p>Now that we have a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a> we can begin to execute queries. The simplest
way to execute a query is to use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute" title="cassandra.cluster.Session.execute"><code class="xref py py-meth docutils literal"><span class="pre">execute()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user_row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">user_row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<p>This will transparently pick a Cassandra node to execute the query against
and handle any retries that are necessary if the operation fails.</p>
<p>By default, each row in the result set will be a
<a class="reference external" href="http://docs.python.org/2/library/collections.html#collections.namedtuple">namedtuple</a>.
Each row will have a matching attribute for each column defined in the schema,
such as <code class="docutils literal"><span class="pre">name</span></code>, <code class="docutils literal"><span class="pre">age</span></code>, and so on.  You can also treat them as normal tuples
by unpacking them or accessing fields by position.  The following three
examples are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
</div>
<p>If you prefer another result format, such as a <code class="docutils literal"><span class="pre">dict</span></code> per row, you
can change the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.row_factory" title="cassandra.cluster.Session.row_factory"><code class="xref py py-attr docutils literal"><span class="pre">row_factory</span></code></a> attribute.</p>
<p>For queries that will be run repeatedly, you should use
<a class="reference external" href="#prepared-statements">Prepared statements</a>.</p>
<div class="section" id="passing-parameters-to-cql-queries">
<h3>Passing Parameters to CQL Queries<a class="headerlink" href="#passing-parameters-to-cql-queries" title="Permalink to this headline">¶</a></h3>
<p>When executing non-prepared statements, the driver supports two forms of
parameter place-holders: positional and named.</p>
<p>Positional parameters are used with a <code class="docutils literal"><span class="pre">%s</span></code> placeholder.  For example,
when you execute:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id)</span>
<span class="sd">    VALUES (%s, %s, %s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">(</span><span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">())</span>
<span class="p">)</span>
</pre></div>
</div>
<p>It is translated to the following CQL query:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">credits</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="n">VALUES</span> <span class="p">(</span><span class="s1">&#39;John O&#39;&#39;Reilly&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">2644</span><span class="n">bada</span><span class="o">-</span><span class="mi">852</span><span class="n">c</span><span class="o">-</span><span class="mf">11e3</span><span class="o">-</span><span class="mi">89</span><span class="n">fb</span><span class="o">-</span><span class="n">e0b9a54a6d93</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you should use <code class="docutils literal"><span class="pre">%s</span></code> for all types of arguments, not just strings.
For example, this would be <strong>wrong</strong>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO USERS (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%d</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>  <span class="c1"># wrong</span>
</pre></div>
</div>
<p>Instead, use <code class="docutils literal"><span class="pre">%s</span></code> for the age placeholder.</p>
<p>If you need to use a literal <code class="docutils literal"><span class="pre">%</span></code> character, use <code class="docutils literal"><span class="pre">%%</span></code>.</p>
<p><strong>Note</strong>: you must always use a sequence for the second argument, even if you are
only passing in a single variable:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="s2">&quot;blah&quot;</span><span class="p">)</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">))</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="p">))</span>  <span class="c1"># right</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;blah&quot;</span><span class="p">])</span>  <span class="c1"># right</span>
</pre></div>
</div>
<p>Note that the second line is incorrect because in Python, single-element tuples
require a comma.</p>
<p>Named place-holders use the <code class="docutils literal"><span class="pre">%(name)s</span></code> form:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id, username)</span>
<span class="sd">    VALUES (%(name)s, %(credits)s, %(user_id)s, %(name)s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="s1">&#39;credits&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">()}</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note that you can repeat placeholders with the same name, such as <code class="docutils literal"><span class="pre">%(name)s</span></code>
in the above example.</p>
<p>Only data values should be supplied this way.  Other items, such as keyspaces,
table names, and column names should be set ahead of time (typically using
normal string formatting).</p>
</div>
<div class="section" id="type-conversions">
<span id="id1"></span><h3>Type Conversions<a class="headerlink" href="#type-conversions" title="Permalink to this headline">¶</a></h3>
<p>For non-prepared statements, Python types are cast to CQL literals in the
following way:</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Python Type</th>
<th class="head">CQL Literal Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">None</span></code></td>
<td><code class="docutils literal"><span class="pre">NULL</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">bool</span></code></td>
<td><code class="docutils literal"><span class="pre">boolean</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">float</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">float</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">double</span></code></div>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">long</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bigint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">smallint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tinyint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">counter</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">decimal.Decimal</span></code></td>
<td><code class="docutils literal"><span class="pre">decimal</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">str</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">unicode</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">ascii</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varchar</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">text</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">buffer</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bytearray</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">blob</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">date</span></code></td>
<td><code class="docutils literal"><span class="pre">date</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">datetime</span></code></td>
<td><code class="docutils literal"><span class="pre">timestamp</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">time</span></code></td>
<td><code class="docutils literal"><span class="pre">time</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">list</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tuple</span></code></div>
<div class="line">generator</div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">list</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">set</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">frozenset</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">set</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">dict</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">OrderedDict</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">map</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">uuid.UUID</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">timeuuid</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">uuid</span></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="asynchronous-queries">
<h3>Asynchronous Queries<a class="headerlink" href="#asynchronous-queries" title="Permalink to this headline">¶</a></h3>
<p>The driver supports asynchronous query execution through
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute_async" title="cassandra.cluster.Session.execute_async"><code class="xref py py-meth docutils literal"><span class="pre">execute_async()</span></code></a>.  Instead of waiting for the query to
complete and returning rows directly, this method almost immediately
returns a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture" title="cassandra.cluster.ResponseFuture"><code class="xref py py-class docutils literal"><span class="pre">ResponseFuture</span></code></a> object.  There are two ways of
getting the final result from this object.</p>
<p>The first is by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a> on it. If
the query has not yet completed, this will block until it has and
then return the result or raise an Exception if an error occurred.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ReadTimeout</span>

<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># ... do some other work</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
<span class="k">except</span> <span class="n">ReadTimeout</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&quot;Query timed out:&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This works well for executing many queries concurrently:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># build a list of futures</span>
<span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">ids_to_fetch</span><span class="p">:</span>
    <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># wait for them to complete and use the results</span>
<span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">futures</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>
<p>Alternatively, instead of calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a>,
you can attach callback and errback functions through the
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callback" title="cassandra.cluster.ResponseFuture.add_callback"><code class="xref py py-meth docutils literal"><span class="pre">add_callback()</span></code></a>,
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_errback" title="cassandra.cluster.ResponseFuture.add_errback"><code class="xref py py-meth docutils literal"><span class="pre">add_errback()</span></code></a>, and
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callbacks" title="cassandra.cluster.ResponseFuture.add_callbacks"><code class="xref py py-meth docutils literal"><span class="pre">add_callbacks()</span></code></a>, methods.  If you have used
Twisted Python before, this is designed to be a lightweight version of
that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_success</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">process_user</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to process user </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="c1"># don&#39;t re-raise errors in the callback</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">exception</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch user info: </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>


<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">future</span><span class="o">.</span><span class="n">add_callbacks</span><span class="p">(</span><span class="n">handle_success</span><span class="p">,</span> <span class="n">handle_error</span><span class="p">)</span>
</pre></div>
</div>
<dl class="docutils">
<dt>There are a few important things to remember when working with callbacks:</dt>
<dd><ul class="first last simple">
<li><strong>Exceptions that are raised inside the callback functions will be logged and then ignored.</strong></li>
<li>Your callback will be run on the event loop thread, so any long-running
operations will prevent other requests from being handled</li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="setting-a-consistency-level">
<h2>Setting a Consistency Level<a class="headerlink" href="#setting-a-consistency-level" title="Permalink to this headline">¶</a></h2>
<p>The consistency level used for a query determines how many of the
replicas of the data you are interacting with need to respond for
the query to be considered a success.</p>
<p>By default, <a class="reference internal" href="api/cassandra.html#cassandra.ConsistencyLevel.LOCAL_ONE" title="cassandra.ConsistencyLevel.LOCAL_ONE"><code class="xref py py-attr docutils literal"><span class="pre">ConsistencyLevel.LOCAL_ONE</span></code></a> will be used for all queries.
You can specify a different default for the session on <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.default_consistency_level" title="cassandra.cluster.Session.default_consistency_level"><code class="xref py py-attr docutils literal"><span class="pre">Session.default_consistency_level</span></code></a>.
To specify a different consistency level per request, wrap queries
in a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>
<span class="kn">from</span> <span class="nn">cassandra.query</span> <span class="kn">import</span> <span class="n">SimpleStatement</span>

<span class="n">query</span> <span class="o">=</span> <span class="n">SimpleStatement</span><span class="p">(</span>
    <span class="s2">&quot;INSERT INTO users (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="n">consistency_level</span><span class="o">=</span><span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h2>Prepared Statements<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Prepared statements are queries that are parsed by Cassandra and then saved
for later use.  When the driver uses a prepared statement, it only needs to
send the values of parameters to bind.  This lowers network traffic
and CPU utilization within Cassandra because Cassandra does not have to
re-parse the query each time.</p>
<p>To prepare a query, use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">Session.prepare()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>

<span class="n">users</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">user_ids_to_query</span><span class="p">:</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>
    <span class="n">users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">prepare()</span></code></a> returns a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> instance
which can be used in place of <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a> instances or literal
string queries.  It is automatically prepared against all nodes, and the driver
handles re-preparing against new nodes and restarted nodes when necessary.</p>
<p>Note that the placeholders for prepared statements are <code class="docutils literal"><span class="pre">?</span></code> characters.  This
is different than for simple, non-prepared statements (although future versions
of the driver may use the same placeholders for both).</p>
<div class="section" id="setting-a-consistency-level-with-prepared-statements">
<h3>Setting a Consistency Level with Prepared Statements<a class="headerlink" href="#setting-a-consistency-level-with-prepared-statements" title="Permalink to this headline">¶</a></h3>
<p>To specify a consistency level for prepared statements, you have two options.</p>
<p>The first is to set a default consistency level for every execution of the
prepared statement:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;mykeyspace&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span>

<span class="c1"># these will both use QUORUM</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id2</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
<p>The second option is to create a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.BoundStatement" title="cassandra.query.BoundStatement"><code class="xref py py-class docutils literal"><span class="pre">BoundStatement</span></code></a> from the
<a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> and binding parameters and set a consistency
level on that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># override the QUORUM default</span>
<span class="n">user3_lookup</span> <span class="o">=</span> <span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">bind</span><span class="p">([</span><span class="n">user_id3</span><span class="p">])</span>
<span class="n">user3_lookup</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">ALL</span>
<span class="n">user3</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user3_lookup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             >next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2013-2017 DataStax.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3.
    </div>
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Getting Started &#8212; Cassandra Driver 3.11.0 documentation</title>

    <link rel="stylesheet" href="_static/custom.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />

    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '3.11.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Upgrading" href="upgrading.html" />
    <link rel="prev" title="Installation" href="installation.html" />
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="index.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Getting Started</a><ul>
<li><a class="reference internal" href="#connecting-to-cassandra">Connecting to Cassandra</a></li>
<li><a class="reference internal" href="#executing-queries">Executing Queries</a><ul>
<li><a class="reference internal" href="#passing-parameters-to-cql-queries">Passing Parameters to CQL Queries</a></li>
<li><a class="reference internal" href="#type-conversions">Type Conversions</a></li>
<li><a class="reference internal" href="#asynchronous-queries">Asynchronous Queries</a></li>
</ul>
</li>
<li><a class="reference internal" href="#setting-a-consistency-level">Setting a Consistency Level</a></li>
<li><a class="reference internal" href="#id2">Prepared Statements</a><ul>
<li><a class="reference internal" href="#setting-a-consistency-level-with-prepared-statements">Setting a Consistency Level with Prepared Statements</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="installation.html"
                        title="previous chapter">Installation</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="upgrading.html"
                        title="next chapter">Upgrading</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/getting_started.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <div><input type="text" name="q" /></div>
      <div><input type="submit" value="Go" /></div>
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">

  <div class="section" id="getting-started">
<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
<p>First, make sure you have the driver properly <a class="reference internal" href="installation.html"><span class="doc">installed</span></a>.</p>
<div class="section" id="connecting-to-cassandra">
<h2>Connecting to Cassandra<a class="headerlink" href="#connecting-to-cassandra" title="Permalink to this headline">¶</a></h2>
<p>Before we can start executing any queries against a Cassandra cluster we need to setup
an instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a>. As the name suggests, you will typically have one
instance of <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> for each Cassandra cluster you want to interact
with.</p>
<p>The simplest way to create a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
</pre></div>
</div>
<p>This will attempt to connection to a Cassandra instance on your
local machine (127.0.0.1).  You can also specify a list of IP
addresses for nodes in your cluster:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">([</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.0.2&#39;</span><span class="p">])</span>
</pre></div>
</div>
<p>The set of IP addresses we pass to the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> is simply
an initial set of contact points.  After the driver connects to one
of these nodes it will <em>automatically discover</em> the rest of the
nodes in the cluster and connect to them, so you don&#8217;t need to list
every node in your cluster.</p>
<p>If you need to use a non-standard port, use SSL, or customize the driver&#8217;s
behavior in some other way, this is the place to do it:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra.cluster</span> <span class="kn">import</span> <span class="n">Cluster</span>
<span class="kn">from</span> <span class="nn">cassandra.policies</span> <span class="kn">import</span> <span class="n">DCAwareRoundRobinPolicy</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">(</span>
    <span class="p">[</span><span class="s1">&#39;10.1.1.3&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.4&#39;</span><span class="p">,</span> <span class="s1">&#39;10.1.1.5&#39;</span><span class="p">],</span>
    <span class="n">load_balancing_policy</span><span class="o">=</span><span class="n">DCAwareRoundRobinPolicy</span><span class="p">(</span><span class="n">local_dc</span><span class="o">=</span><span class="s1">&#39;US_EAST&#39;</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="mi">9042</span><span class="p">)</span>
</pre></div>
</div>
<p>You can find a more complete list of options in the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> documentation.</p>
<p>Instantiating a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster" title="cassandra.cluster.Cluster"><code class="xref py py-class docutils literal"><span class="pre">Cluster</span></code></a> does not actually connect us to any nodes.
To establish connections and begin executing queries we need a
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>, which is created by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">Cluster.connect()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Cluster.connect" title="cassandra.cluster.Cluster.connect"><code class="xref py py-meth docutils literal"><span class="pre">connect()</span></code></a> method takes an optional <code class="docutils literal"><span class="pre">keyspace</span></code> argument
which sets the default keyspace for all queries made through that <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;mykeyspace&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>You can always change a Session&#8217;s keyspace using <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.set_keyspace" title="cassandra.cluster.Session.set_keyspace"><code class="xref py py-meth docutils literal"><span class="pre">set_keyspace()</span></code></a> or
by executing a <code class="docutils literal"><span class="pre">USE</span> <span class="pre">&lt;keyspace&gt;</span></code> query:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">set_keyspace</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span>
<span class="c1"># or you can do this instead</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;USE users&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="executing-queries">
<h2>Executing Queries<a class="headerlink" href="#executing-queries" title="Permalink to this headline">¶</a></h2>
<p>Now that we have a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session" title="cassandra.cluster.Session"><code class="xref py py-class docutils literal"><span class="pre">Session</span></code></a> we can begin to execute queries. The simplest
way to execute a query is to use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute" title="cassandra.cluster.Session.execute"><code class="xref py py-meth docutils literal"><span class="pre">execute()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user_row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">user_row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user_row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<p>This will transparently pick a Cassandra node to execute the query against
and handle any retries that are necessary if the operation fails.</p>
<p>By default, each row in the result set will be a
<a class="reference external" href="http://docs.python.org/2/library/collections.html#collections.namedtuple">namedtuple</a>.
Each row will have a matching attribute for each column defined in the schema,
such as <code class="docutils literal"><span class="pre">name</span></code>, <code class="docutils literal"><span class="pre">age</span></code>, and so on.  You can also treat them as normal tuples
by unpacking them or accessing fields by position.  The following three
examples are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">row</span><span class="o">.</span><span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">email</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">rows</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT name, age, email FROM users&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</pre></div>
</div>
<p>If you prefer another result format, such as a <code class="docutils literal"><span class="pre">dict</span></code> per row, you
can change the <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.row_factory" title="cassandra.cluster.Session.row_factory"><code class="xref py py-attr docutils literal"><span class="pre">row_factory</span></code></a> attribute.</p>
<p>For queries that will be run repeatedly, you should use
<a class="reference external" href="#prepared-statements">Prepared statements</a>.</p>
<div class="section" id="passing-parameters-to-cql-queries">
<h3>Passing Parameters to CQL Queries<a class="headerlink" href="#passing-parameters-to-cql-queries" title="Permalink to this headline">¶</a></h3>
<p>When executing non-prepared statements, the driver supports two forms of
parameter place-holders: positional and named.</p>
<p>Positional parameters are used with a <code class="docutils literal"><span class="pre">%s</span></code> placeholder.  For example,
when you execute:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id)</span>
<span class="sd">    VALUES (%s, %s, %s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">(</span><span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">())</span>
<span class="p">)</span>
</pre></div>
</div>
<p>It is translated to the following CQL query:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">credits</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
<span class="n">VALUES</span> <span class="p">(</span><span class="s1">&#39;John O&#39;&#39;Reilly&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">2644</span><span class="n">bada</span><span class="o">-</span><span class="mi">852</span><span class="n">c</span><span class="o">-</span><span class="mf">11e3</span><span class="o">-</span><span class="mi">89</span><span class="n">fb</span><span class="o">-</span><span class="n">e0b9a54a6d93</span><span class="p">)</span>
</pre></div>
</div>
<p>Note that you should use <code class="docutils literal"><span class="pre">%s</span></code> for all types of arguments, not just strings.
For example, this would be <strong>wrong</strong>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO USERS (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%d</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;bob&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>  <span class="c1"># wrong</span>
</pre></div>
</div>
<p>Instead, use <code class="docutils literal"><span class="pre">%s</span></code> for the age placeholder.</p>
<p>If you need to use a literal <code class="docutils literal"><span class="pre">%</span></code> character, use <code class="docutils literal"><span class="pre">%%</span></code>.</p>
<p><strong>Note</strong>: you must always use a sequence for the second argument, even if you are
only passing in a single variable:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="s2">&quot;blah&quot;</span><span class="p">)</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">))</span>  <span class="c1"># wrong</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="p">))</span>  <span class="c1"># right</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;INSERT INTO foo (bar) VALUES (</span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;blah&quot;</span><span class="p">])</span>  <span class="c1"># right</span>
</pre></div>
</div>
<p>Note that the second line is incorrect because in Python, single-element tuples
require a comma.</p>
<p>Named place-holders use the <code class="docutils literal"><span class="pre">%(name)s</span></code> form:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
    <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    INSERT INTO users (name, credits, user_id, username)</span>
<span class="sd">    VALUES (%(name)s, %(credits)s, %(user_id)s, %(name)s)</span>
<span class="sd">    &quot;&quot;&quot;</span><span class="p">,</span>
    <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s2">&quot;John O&#39;Reilly&quot;</span><span class="p">,</span> <span class="s1">&#39;credits&#39;</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="n">uuid</span><span class="o">.</span><span class="n">uuid1</span><span class="p">()}</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note that you can repeat placeholders with the same name, such as <code class="docutils literal"><span class="pre">%(name)s</span></code>
in the above example.</p>
<p>Only data values should be supplied this way.  Other items, such as keyspaces,
table names, and column names should be set ahead of time (typically using
normal string formatting).</p>
</div>
<div class="section" id="type-conversions">
<span id="id1"></span><h3>Type Conversions<a class="headerlink" href="#type-conversions" title="Permalink to this headline">¶</a></h3>
<p>For non-prepared statements, Python types are cast to CQL literals in the
following way:</p>
<table border="1" class="docutils">
<colgroup>
<col width="44%" />
<col width="56%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Python Type</th>
<th class="head">CQL Literal Type</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">None</span></code></td>
<td><code class="docutils literal"><span class="pre">NULL</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">bool</span></code></td>
<td><code class="docutils literal"><span class="pre">boolean</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">float</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">float</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">double</span></code></div>
</div>
</td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">long</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">int</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bigint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">smallint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tinyint</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">counter</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">decimal.Decimal</span></code></td>
<td><code class="docutils literal"><span class="pre">decimal</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">str</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">unicode</span></code></div>
</div>
</td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">ascii</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">varchar</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">text</span></code></div>
</div>
</td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">buffer</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">bytearray</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">blob</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">date</span></code></td>
<td><code class="docutils literal"><span class="pre">date</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">datetime</span></code></td>
<td><code class="docutils literal"><span class="pre">timestamp</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">time</span></code></td>
<td><code class="docutils literal"><span class="pre">time</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">list</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">tuple</span></code></div>
<div class="line">generator</div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">list</span></code></td>
</tr>
<tr class="row-odd"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">set</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">frozenset</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">set</span></code></td>
</tr>
<tr class="row-even"><td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">dict</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">OrderedDict</span></code></div>
</div>
</td>
<td><code class="docutils literal"><span class="pre">map</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">uuid.UUID</span></code></td>
<td><div class="first last line-block">
<div class="line"><code class="docutils literal"><span class="pre">timeuuid</span></code></div>
<div class="line"><code class="docutils literal"><span class="pre">uuid</span></code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="asynchronous-queries">
<h3>Asynchronous Queries<a class="headerlink" href="#asynchronous-queries" title="Permalink to this headline">¶</a></h3>
<p>The driver supports asynchronous query execution through
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.execute_async" title="cassandra.cluster.Session.execute_async"><code class="xref py py-meth docutils literal"><span class="pre">execute_async()</span></code></a>.  Instead of waiting for the query to
complete and returning rows directly, this method almost immediately
returns a <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture" title="cassandra.cluster.ResponseFuture"><code class="xref py py-class docutils literal"><span class="pre">ResponseFuture</span></code></a> object.  There are two ways of
getting the final result from this object.</p>
<p>The first is by calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a> on it. If
the query has not yet completed, this will block until it has and
then return the result or raise an Exception if an error occurred.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ReadTimeout</span>

<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># ... do some other work</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">print</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span>
<span class="k">except</span> <span class="n">ReadTimeout</span><span class="p">:</span>
    <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&quot;Query timed out:&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>This works well for executing many queries concurrently:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># build a list of futures</span>
<span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">query</span> <span class="o">=</span> <span class="s2">&quot;SELECT * FROM users WHERE user_id=</span><span class="si">%s</span><span class="s2">&quot;</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">ids_to_fetch</span><span class="p">:</span>
    <span class="n">futures</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>

<span class="c1"># wait for them to complete and use the results</span>
<span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">futures</span><span class="p">:</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>
<p>Alternatively, instead of calling <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.result" title="cassandra.cluster.ResponseFuture.result"><code class="xref py py-meth docutils literal"><span class="pre">result()</span></code></a>,
you can attach callback and errback functions through the
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callback" title="cassandra.cluster.ResponseFuture.add_callback"><code class="xref py py-meth docutils literal"><span class="pre">add_callback()</span></code></a>,
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_errback" title="cassandra.cluster.ResponseFuture.add_errback"><code class="xref py py-meth docutils literal"><span class="pre">add_errback()</span></code></a>, and
<a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.ResponseFuture.add_callbacks" title="cassandra.cluster.ResponseFuture.add_callbacks"><code class="xref py py-meth docutils literal"><span class="pre">add_callbacks()</span></code></a>, methods.  If you have used
Twisted Python before, this is designed to be a lightweight version of
that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">handle_success</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">process_user</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to process user </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
        <span class="c1"># don&#39;t re-raise errors in the callback</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">exception</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch user info: </span><span class="si">%s</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">)</span>


<span class="n">future</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute_async</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
<span class="n">future</span><span class="o">.</span><span class="n">add_callbacks</span><span class="p">(</span><span class="n">handle_success</span><span class="p">,</span> <span class="n">handle_error</span><span class="p">)</span>
</pre></div>
</div>
<dl class="docutils">
<dt>There are a few important things to remember when working with callbacks:</dt>
<dd><ul class="first last simple">
<li><strong>Exceptions that are raised inside the callback functions will be logged and then ignored.</strong></li>
<li>Your callback will be run on the event loop thread, so any long-running
operations will prevent other requests from being handled</li>
</ul>
</dd>
</dl>
</div>
</div>
<div class="section" id="setting-a-consistency-level">
<h2>Setting a Consistency Level<a class="headerlink" href="#setting-a-consistency-level" title="Permalink to this headline">¶</a></h2>
<p>The consistency level used for a query determines how many of the
replicas of the data you are interacting with need to respond for
the query to be considered a success.</p>
<p>By default, <a class="reference internal" href="api/cassandra.html#cassandra.ConsistencyLevel.LOCAL_ONE" title="cassandra.ConsistencyLevel.LOCAL_ONE"><code class="xref py py-attr docutils literal"><span class="pre">ConsistencyLevel.LOCAL_ONE</span></code></a> will be used for all queries.
You can specify a different default for the session on <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.default_consistency_level" title="cassandra.cluster.Session.default_consistency_level"><code class="xref py py-attr docutils literal"><span class="pre">Session.default_consistency_level</span></code></a>.
To specify a different consistency level per request, wrap queries
in a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>
<span class="kn">from</span> <span class="nn">cassandra.query</span> <span class="kn">import</span> <span class="n">SimpleStatement</span>

<span class="n">query</span> <span class="o">=</span> <span class="n">SimpleStatement</span><span class="p">(</span>
    <span class="s2">&quot;INSERT INTO users (name, age) VALUES (</span><span class="si">%s</span><span class="s2">, </span><span class="si">%s</span><span class="s2">)&quot;</span><span class="p">,</span>
    <span class="n">consistency_level</span><span class="o">=</span><span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span><span class="p">)</span>
<span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h2>Prepared Statements<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Prepared statements are queries that are parsed by Cassandra and then saved
for later use.  When the driver uses a prepared statement, it only needs to
send the values of parameters to bind.  This lowers network traffic
and CPU utilization within Cassandra because Cassandra does not have to
re-parse the query each time.</p>
<p>To prepare a query, use <a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">Session.prepare()</span></code></a>:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>

<span class="n">users</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">user_id</span> <span class="ow">in</span> <span class="n">user_ids_to_query</span><span class="p">:</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id</span><span class="p">])</span>
    <span class="n">users</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</pre></div>
</div>
<p><a class="reference internal" href="api/cassandra/cluster.html#cassandra.cluster.Session.prepare" title="cassandra.cluster.Session.prepare"><code class="xref py py-meth docutils literal"><span class="pre">prepare()</span></code></a> returns a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> instance
which can be used in place of <a class="reference internal" href="api/cassandra/query.html#cassandra.query.SimpleStatement" title="cassandra.query.SimpleStatement"><code class="xref py py-class docutils literal"><span class="pre">SimpleStatement</span></code></a> instances or literal
string queries.  It is automatically prepared against all nodes, and the driver
handles re-preparing against new nodes and restarted nodes when necessary.</p>
<p>Note that the placeholders for prepared statements are <code class="docutils literal"><span class="pre">?</span></code> characters.  This
is different than for simple, non-prepared statements (although future versions
of the driver may use the same placeholders for both).</p>
<div class="section" id="setting-a-consistency-level-with-prepared-statements">
<h3>Setting a Consistency Level with Prepared Statements<a class="headerlink" href="#setting-a-consistency-level-with-prepared-statements" title="Permalink to this headline">¶</a></h3>
<p>To specify a consistency level for prepared statements, you have two options.</p>
<p>The first is to set a default consistency level for every execution of the
prepared statement:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">cassandra</span> <span class="kn">import</span> <span class="n">ConsistencyLevel</span>

<span class="n">cluster</span> <span class="o">=</span> <span class="n">Cluster</span><span class="p">()</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">cluster</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;mykeyspace&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">prepare</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM users WHERE user_id=?&quot;</span><span class="p">)</span>
<span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">QUORUM</span>

<span class="c1"># these will both use QUORUM</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id1</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user_lookup_stmt</span><span class="p">,</span> <span class="p">[</span><span class="n">user_id2</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</pre></div>
</div>
<p>The second option is to create a <a class="reference internal" href="api/cassandra/query.html#cassandra.query.BoundStatement" title="cassandra.query.BoundStatement"><code class="xref py py-class docutils literal"><span class="pre">BoundStatement</span></code></a> from the
<a class="reference internal" href="api/cassandra/query.html#cassandra.query.PreparedStatement" title="cassandra.query.PreparedStatement"><code class="xref py py-class docutils literal"><span class="pre">PreparedStatement</span></code></a> and binding parameters and set a consistency
level on that:</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="c1"># override the QUORUM default</span>
<span class="n">user3_lookup</span> <span class="o">=</span> <span class="n">user_lookup_stmt</span><span class="o">.</span><span class="n">bind</span><span class="p">([</span><span class="n">user_id3</span><span class="p">])</span>
<span class="n">user3_lookup</span><span class="o">.</span><span class="n">consistency_level</span> <span class="o">=</span> <span class="n">ConsistencyLevel</span><span class="o">.</span><span class="n">ALL</span>
<span class="n">user3</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">user3_lookup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="upgrading.html" title="Upgrading"
             >next</a> |</li>
        <li class="right" >
          <a href="installation.html" title="Installation"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.html">Cassandra Driver 3.11.0 documentation</a> &#187;</li>
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2013-2017 DataStax.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3.
    </div>
  </body>
</html>